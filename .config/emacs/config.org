 #+TITLE: Work Emacs configuration
#+AUTHOR: saucoide
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Table of Contents                                          :toc@2:noexport:
- [[#about][About]]
- [[#startup][Startup]]
  - [[#early-initel][early-init.el]]
  - [[#dooms-startup-optimizations][doom's startup optimizations]]
- [[#package-system-setup][Package System Setup]]
- [[#basic-settings][Basic Settings]]
  - [[#various-defaults][Various Defaults]]
  - [[#backups][Backups]]
  - [[#load-custom-files][Load custom files]]
  - [[#garbage-collector][Garbage Collector]]
  - [[#path--exec-path][PATH & exec-path]]
  - [[#evil][Evil]]
- [[#basic-gui-theme-etc][Basic GUI, Theme, etc.]]
  - [[#basic-gui-elements][Basic GUI Elements]]
  - [[#fonts][Fonts]]
  - [[#show-line-numbers-but-not-in-all-modes][Show line numbers, but not in all modes]]
  - [[#highlight-matching-parenthesis-brackets-etc][Highlight matching Parenthesis, Brackets, etc]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
- [[#package-configuration][Package Configuration]]
  - [[#dired][Dired]]
  - [[#completions][Completions]]
  - [[#help][Help]]
  - [[#ripgrep][Ripgrep]]
- [[#development][Development]]
  - [[#languages][Languages]]
  - [[#repl][REPL]]
  - [[#kubernetes][Kubernetes]]
  - [[#linting][Linting]]
  - [[#code-formatting][Code Formatting]]
  - [[#commenting][Commenting]]
  - [[#git][Git]]
  - [[#lsp][LSP]]
  - [[#electric-pairs][Electric-Pairs]]
  - [[#yasnippets][Yasnippets]]
- [[#terminals][Terminals]]
  - [[#vterm][vterm]]
- [[#org-mode][Org Mode]]
  - [[#org-basic-config][Org Basic Config]]
  - [[#capture-templates][Capture Templates]]
  - [[#header-bullets][Header Bullets]]
  - [[#source-code-blocks][Source Code Blocks]]
  - [[#toc-org][Toc-Org]]
- [[#org-roam][Org Roam]]
- [[#key-bindings][Key Bindings]]
  - [[#general][General]]
  - [[#leader-key-spc][Leader Key =SPC=]]
  - [[#agenda-spc-a][Agenda =SPC a=]]
  - [[#buffers-spc-b][Buffers =SPC b=]]
  - [[#code-spc-c][Code =SPC c=]]
  - [[#eval-spc-e][Eval =SPC e=]]
  - [[#dired-spc-d][Dired =SPC d=]]
  - [[#files-spc-f][Files =SPC f=]]
  - [[#git-spc-g][Git =SPC g=]]
  - [[#help-spc-h][Help =SPC h=]]
  - [[#kubernetes-spc-k][Kubernetes =SPC k=]]
  - [[#notes-spc-n][Notes =SPC n=]]
  - [[#open-spc-o][Open =SPC o=]]
  - [[#projects-spc-p][Projects =SPC p=]]
  - [[#quit-spc-q][Quit =SPC q=]]
  - [[#search-spc-s][Search =SPC s=]]
  - [[#toggle-spc-t][Toggle =SPC t=]]
  - [[#embark-action-spc-l][Embark Action =SPC l=]]
  - [[#window-management-spc-w][Window Management =SPC w=]]
  - [[#other-keybindings][Other KeyBindings]]
- [[#envrc][envrc]]
- [[#auto-literate-config][Auto Literate Config]]

* About
  My config starting from vanilla emacs, it imitates the look and some of the
  behavior of doom emacs.

  It takes pieces from doom emacs, the "emacs from scratch" series by system
  crafters, and sacha chua, tecosaurs & lccambiaghi emacs configs. I made this
  originally to be able to run something similar to doom in a locked down
  windows environment where doom was not an option.

* Startup
** early-init.el

From doom's early init

#+begin_src emacs-lisp :tangle early-init.el
  ;; generated from config.org

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'. Doom handles package initialization, so
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Disable GUI elements
  (menu-bar-mode t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)

#+end_src

** doom's startup optimizations

#+begin_src emacs-lisp
  ;; generated from config.org

  ;; `file-name-handler-alist' is consulted on every `require', `load' and various
  ;; path/io functions. You get a minor speed up by nooping this. However, this
  ;; may cause problems on builds of Emacs where its site lisp files aren't
  ;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
  (unless (daemonp)
      (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
      (setq file-name-handler-alist nil)
      ;; Restore `file-name-handler-alist' later, because it is needed for handling
      ;; encrypted or compressed files, among other things.
      (defun doom-reset-file-handler-alist-h ()
          ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
          ;; since startup ought to be preserved.
          (dolist (handler file-name-handler-alist)
              (add-to-list 'doom--initial-file-name-handler-alist handler))
          (setq file-name-handler-alist doom--initial-file-name-handler-alist))
      (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
      (add-hook 'after-init-hook '(lambda ()
                                      ;; restore after startup
                                      (setq gc-cons-threshold 16777216
                                          gc-cons-percentage 0.1))))

  ;; Ensure Doom is running out of this file's directory
  (setq user-emacs-directory (file-truename (file-name-directory load-file-name)))
#+end_src
 
* Package System Setup

Initializing source repositories

#+begin_src emacs-lisp

(require 'package)
(setq package-archives '(
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
    (package-refresh-contents))

#+end_src

I'm using =use-package= to load packages, it helps automatically install packages
It can also autoload packages only when needed instead of everything at startup

#+begin_src emacs-lisp

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Basic Settings
** Various Defaults

#+begin_src emacs-lisp

;; Basic UI settings
(setq inhibit-startup-screen t
      initial-scratch-message nil
      sentence-end-double-space nil
      ring-bell-function 'ignore
      frame-resize-pixelwise t)

;; Personal information
(setq user-full-name "saucoide"
      user-mail-address "saucoide@gmail.com")

;; Auth sources, this us used for authentication
;; including mu4e, etc.
(setq auth-sources '(password-store))
(auth-source-pass-enable)

;; Change how much data emacs can read in one chunk
(setq read-process-output-max (* 1024 1024))

;; save minibuffer history between sessions
(savehist-mode 1)

;; Answer with y/n instead of yes/no
(defalias 'yes-or-no-p 'y-or-n-p)    

;; Default to utf-8 for everything
(set-charset-priority 'unicode)
(setq locale-coding-system 'utf-8
      coding-system-for-read 'utf-8
      coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
(set-language-environment "UTF-8")

;; write over selected text on input... like all modern editors do
(delete-selection-mode t)

;; I don't want ESC as a modifier
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Delete to trash
(setq-default delete-by-moving-to-trash t)

;; Org mode by default on new buffers
(setq-default major-mode 'org-mode)

;; Undo settings
(setq undo-limit 60000000                   ; Raise undo limit to 60mb
      evil-want-fine-undo t)                ; A more granular undo

;; Indentation
(setq-default indent-tabs-mode nil)         ; use spaces
(setq-default tab-width 4)                  ; 4 spaces is the right tab width

;; Line length
(setq-default fill-column 88)

;; visual-line
(set-default 'truncate-lines 't)
(global-visual-line-mode -1)

#+end_src

** Backups

 By default, Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. The following code stashes them all in ~/.local/emacs/backups, where I can find them with C-x C-f (find-file) if I really need to.

#+begin_src emacs-lisp

;; Change the default directory to store backups
(setq backup-directory-alist '(("." . "~/.local/emacs/backups")))

;; Or just stop emacs from making them altogether
(setq make-backup-files nil
      auto-save-default nil
      create-lockfiles nil)

#+end_src

** Load custom files

#+begin_src emacs-lisp
(setq custom-file "~/.config/emacs/custom.el")
(load custom-file t)
#+end_src

** Garbage Collector

GCMH sets a high GC threshold when emacs is active and lowers it on idle to avoid interfering when we are actually using emacs

#+begin_src emacs-lisp
(use-package gcmh
    :demand
    :config
    (gcmh-mode 1))
#+end_src

** PATH & exec-path

I should find a better way to do this, but for now it works

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :init
  (setq exec-path-from-shell-shell-name "fish")
  (exec-path-from-shell-initialize))
#+end_src

** Evil
   
Evil, evil collection & undo-fu
   
#+begin_src emacs-lisp

(use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

 ;; using undo-fu to get redo functionality
(use-package undo-fu
    :config
    (setq evil-undo-system "undo-fu")
    (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
    (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo))

#+end_src
   
evil org to get nicer keybindings in org-mode

#+begin_src emacs-lisp

(use-package evil-org
    :hook (org-mode . evil-org-mode))

#+end_src

evil-snipe, search 2 character motions to jump around text with ~s~ and ~S~

#+begin_src emacs-lisp

(use-package evil-snipe
    :after evil
    :demand
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1)
    (setq evil-snipe-scope 'buffer))

#+end_src

* Basic GUI, Theme, etc.
** Basic GUI Elements
  
#+begin_src emacs-lisp

(scroll-bar-mode -1)	; disable visible scrollbar
(tool-bar-mode -1)		; disable toolbar
(tooltip-mode -1)		; disable tooltips
(set-fringe-mode 3) 	; margins
(menu-bar-mode t) 		; disable menu bar 

(add-to-list 'default-frame-alist '(undecorated-round  . t)) ; disable titlebar

#+end_src
 
** Fonts

#+begin_src emacs-lisp

(set-face-attribute 'default nil
                    :font "JetBrainsMono Nerd Font Mono"
                    :height 125) 
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrainsMono Nerd Font Mono"
                    :height 125)
(set-face-attribute 'variable-pitch nil
                    :font "JetBrainsMono Nerd Font Mono"
                    :height 125)

#+end_src

** Show line numbers, but not in all modes

#+begin_src emacs-lisp

(global-display-line-numbers-mode t)
(setq display-line-numbers-type t)

;; modes to skip
(dolist (mode '(term-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
        (add-hook mode (lambda ()
                         (display-line-numbers-mode 0))))  

#+end_src

** Highlight matching Parenthesis, Brackets, etc

#+begin_src emacs-lisp

(use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

#+end_src

** Theme
   
#+begin_src emacs-lisp

(use-package doom-themes
    :init
    ;; (load-theme 'doom-tomorrow-night t))  
    ;; (load-theme 'doom-material-dark t))  
    ;; (load-theme 'doom-monokai-octagon t))  
    (load-theme 'doom-monokai-pro t))  
    ;; (load-theme 'doom-material t))  
    ;; (load-theme 'doom-palenight t))  
    ;; (load-theme 'doom-dracula t))

#+end_src

** Modeline

#+begin_src emacs-lisp

;; all the icons is needed for doom-modeline
;; run M-x all-the-icons-install-fonts 

(use-package all-the-icons)

;; doom-modeline to replace the standard modeline
(use-package doom-modeline
  :config
  (setq doom-modeline-unicode-fallback t
        doom-modeline-icon t)
  :init
  (column-number-mode)
  (doom-modeline-mode 1))

#+end_src

** Dashboard

The dashboard is the initial "home" buffer we get on startup
We can customize it with =dashboard= to show recent files, projects, etc.
   
#+begin_src emacs-lisp

(use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    ;; :requires page-break-lines
    :config
    (setq dashboard-startup-banner "~/.config/emacs/logo.png")
    ;; (setq dashboard-startup-banner "~/.config/emacs/logo.txt")
	;; (setq dashboard-center-content t)
    (setq dashboard-set-navigator t)
	(setq dashboard-agenda-time-string-format "%Y-%m-%d %a")
	(setq dashboard-match-agenda-entry "CATEGORY={TODO}")
	(setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
	;; (setq dashboard-agenda-release-buffers t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    ;; (setq dashboard-footer-icon nil)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            ;; (projects . 5)
                            (agenda . 10))))

;; Set dashboard to be the initial buffer that opens when using emacsclient
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

#+end_src

* Package Configuration
** Dired

The emacs file manager

#+begin_src emacs-lisp

;; show icons on dired
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles)

(use-package diredfl
  :hook (dired-mode . diredfl-mode))

(use-package dired
    :ensure nil
    ;; :commands (dired dired-jump)
    :config
    (setq insert-directory-program "/usr/local/bin/gls")
    (setq dired-listing-switches "-algho --group-directories-first --time-style \"+%Y-%m-%d %H:%M\"")
    (all-the-icons-dired-mode 1)
    (dired-hide-dotfiles-mode 1)
    (evil-define-key 'normal dired-mode-map
    (kbd "H") 'dired-hide-dotfiles-mode
    (kbd "l") 'dired-single-buffer
    (kbd "<right>") 'dired-single-buffer
    (kbd "h") 'dired-single-up-directory
    (kbd "<left>") 'dired-single-up-directory))

(use-package dired-single)

#+end_src

** Completions
*** Transient

#+begin_src emacs-lisp
(use-package transient
  :config
  (define-key transient-map (kbd "<escape>") 'transient-quit-one)
  (transient-bind-q-to-quit))
#+end_src

*** Which-Key

=which-key= to have keybiding completions for any unfinished key sequence, as a popup
   
#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

*** Vertico

#+begin_src emacs-lisp
(use-package vertico
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src

*** Marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

*** Consult

#+begin_src emacs-lisp
(use-package consult
  :bind (("C-s" . consult-line)
         :map minibuffer-local-map
         ("C-r" . consult-history))
  :custom
  (completion-in-region-function #'consult-completion-in-region)
  (consult-fd-args "fd --hidden")
  (consult-async-min-input 1)
  (consult-preview-key 'any))  ;'(:debounce 0.5 any)))  ;; delay previews
#+End_src

*** TODO Embark

https://karthinks.com/software/fifteen-ways-to-use-embark/

#+begin_src emacs-lisp
(use-package embark
  :bind (("C-l" . embark-act)
         :map minibuffer-local-map
         ("C-l" . embark-act))
  :config
  ;; Show Embark actions via which-key
  (setq embark-action-indicator
        (lambda (map)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)
  (setopt embark-verbose-indicator-display-action
          '(display-buffer-at-bottom)))
  
(use-package embark-consult
  :after (embark consult)
  :hook
  (embark-collect-mode . conult-preview-at-point-mode))

#+end_src

*** Corfu

#+begin_src emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  :init
  (global-corfu-mode)
  :config
  (setq completion-cycle-threshold 4)
  (setq tab-always-indent 'complete))
#+end_src

*** Orderless

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
*** Smex

smex gives us a nicer =M-x= that remembers our frequently used commands

#+begin_src emacs-lisp
(use-package smex
  :config (smex-initialize))
#+end_src
     
** Help
    
helpful is an enhanced version of the builtin emacs help, with more information

#+begin_src emacs-lisp

(use-package helpful
  :after evil
  :init
  (setq evil-lookup-func #'helpful-at-point)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** Ripgrep

#+begin_src emacs-lisp

(use-package rg
  :config
  (rg-enable-menu))

#+end_src
* Development
** Languages
*** Python

#+begin_src emacs-lisp

; use tree-sitter
; Install it first by M-x treesit-install-language-grammar
(setq major-mode-remap-alist
      '((python-mode . python-ts-mode)))

#+end_src
*** Nix

#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src

*** Clojure

#+begin_src emacs-lisp
(use-package cider
    :mode "\\.clj[sc]?\\'"
    :config
    (evil-collection-cider-setup))
#+end_src

*** Scala

#+begin_src emacs-lisp
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
#+end_src

*** Kotlin

#+begin_src emacs-lisp
(use-package kotlin-mode)
(use-package kotlin-ts-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.kt\\'" . kotlin-ts-mode))
)
#+end_src>
*** Rust

#+begin_src emacs-lisp
(use-package rustic
  :config
  (setq rustic-lsp-client 'eglot)
  (setq rustic-format-on-save t))

#+end_src

*** Elm

#+begin_src emacs-lisp
(use-package elm-mode
  :hook
  (elm-mode . elm-indent-simple-mode)
  (elm-mode . elm-format-on-save-mode))
#+end_src

*** Terraform

#+begin_src emacs-lisp
(use-package terraform-mode
  :hook
  (terraform-mode . terraform-format-on-save-mode))
#+end_src

*** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))
#+end_src

** REPL

eval in repl all the things

#+begin_src emacs-lisp
(use-package eval-in-repl
  :config
  (setq eir-repl-placement 'right)
  (setq eir-jump-after-eval nil)
  (setq eir-always-split-script-window t)
  (setq eir-use-python-shell-send-string nil)
  ;;; Emacs-lisp
  (require 'eval-in-repl-ielm)
  (setq eir-ielm-eval-in-current-buffer t)
  (define-key emacs-lisp-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
  (define-key lisp-interaction-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
  (define-key Info-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
  ;;; Clojure
  (require 'eval-in-repl-cider)
  (define-key clojure-mode-map (kbd "<C-return>") 'eir-eval-in-cider)
  ;;; Python
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")
  (require 'eval-in-repl-python)
  (add-hook 'python-mode-hook
            '(lambda ()
               (local-set-key (kbd "<C-return>") 'eir-eval-in-python)))
  ;;; Shell
  (require 'eval-in-repl-shell)
    (add-hook 'sh-mode-hook
              '(lambda()
                 (local-set-key (kbd "C-<return>") 'eir-eval-in-shell)))
  )
#+end_src

** Kubernetes

#+begin_src emacs-lisp

(use-package kubel
  :defer t
  :after (vterm)
  :config (kubel-vterm-setup))

;; https://github.com/abrochard/kubel/pull/127
(use-package kubel-evil
  :defer t
  :after (kubel)
  :config 
  (kubel-evil-mode))
  
#+end_src

** Linting

flycheck does syntax checking as you type

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

** Code Formatting

Reformatter to automatically format code

#+begin_src emacs-lisp

;; Reformatter
(use-package reformatter)

;; Defining reformatters
;; python
(reformatter-define black-format
  :program "black"
  :args '("-"))
(reformatter-define ruff-format
  :program "ruff"
  :args '("format" "-"))
(reformatter-define prettier-format
  :program "prettier"
  :args '("--parser" "json"))
;; terraform
(reformatter-define terraform-format
  :program "terraform"
  :args '("fmt" "-"))
;; yaml
(reformatter-define yaml-format
  :program "yamlfmt"
  :args '("-"))
;; terraform
(reformatter-define pg-format
  :program "pg_format"
  :args '("-"))

;; This function acts as entrypoint / dispatcher
;; depending on the mode
(defun my/reformat-buffer()
    "Reformat the current buffer if there is
 a reformatter configured for the active major mode."
  (interactive)
  (pcase major-mode
    ('python-mode (ruff-format-buffer))
    ('python-ts-mode (ruff-format-buffer))
    ('yaml-mode (yaml-format-buffer))
    ('terraform-mode (terraform-format-buffer))
    ('js-mode (prettier-format-buffer))
    ('sql-mode (pg-format-buffer))
    (_ (message "No reformatted configured for `%s`" major-mode))
    )
  )
  
(defun my/reformat-region (beg end)
    "Reformat the current buffer if there is
 a reformatter configured for the active major mode."
  (interactive "r")
  (pcase major-mode
    ;; ('python-mode (black-format-buffer))
    ('yaml-mode (yaml-format-region beg end))
    ;; ('terraform-mode (terraform-format-buffer))
    ('js-mode (prettier-format-region beg end))
    (_ (message "No reformatted configured for `%s`" major-mode))
    )
  )

#+end_src

** Commenting

=evil-nerd-commenter= to comment/uncomment with =C-/=

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :bind ("C-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Git

Magit!!

#+begin_src emacs-lisp

(use-package magit
  ;; commands that make magit load
  :defer t
  :commands (magit-status magit-get-current-branch))

#+end_src

We can also choose to add forge to have integration with github/gitlab

#+begin_src emacs-lisp

;; (use-package forge)

#+end_src

*** merge-conflicts

A hydra to handle merge conflicts easily, taken from:
https://github.com/alphapapa/unpackaged.el#hydra

#+begin_src emacs-lisp
(use-package hydra)
(use-package smerge-mode
  :config
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (unpackaged/smerge-hydra/body)))))
#+end_src

*** git-gutter

Highlight lines with changes

#+begin_src emacs-lisp
(use-package git-gutter
  :defer t
  :hook ((text-mode . git-gutter-mode)
         (prog-mode . git-gutter-mode)))
#+end_src

*** Magit-todos

=magit-todos= helps find all TODOs in a project

#+begin_src emacs-lisp
(use-package magit-todos
  :hook (magit-mode . magit-todos-mode)
  :config
  (setq magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?"))
#+end_src

** LSP

#+begin_src emacs-lisp

 (use-package lsp-mode
   :init
   ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
   (setq lsp-keymap-prefix "C-l")
   :config
   (setq lsp-modeline-diagnostics-enable t)
   :hook (
          ;; replace XXX-mode with concrete major-mode(e. g. python-mode)
          (elm-mode . lsp)
          (python-ts-mode . lsp)
          (clojure-mode . lsp)
          (rustic-mode . lsp)
          (scala-mode . lsp)
          ;; if you want which-key integration
          (lsp-mode . lsp-enable-which-key-integration))
   :commands (lsp lsp-deferred))
 
 ;; optionally
 ;; (use-package lsp-ui :commands lsp-ui-mode)
 ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-python)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src

** Electric-Pairs

Complete parens, brackets, etc pairs

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

** Yasnippets

YASnippet is a template system for emaxs, it lets you create custom templates that expand from given keys

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.config/emacs/yasnippets"))
  (yas-global-mode 1))
#+end_src

* Terminals

** vterm

#+begin_src emacs-lisp

 (use-package vterm
   :after evil-collection
   :config
   (setq vterm-shell "$HOME/.nix-profile/bin/fish")
   (setq term-prompt-regexp "➜ *")
   (evil-define-minor-mode-key 'normal 'vterm-mode (kbd "_") 'evil-collection-vterm-first-non-blank)
   ;; (evil-define-key 'normal 'vterm-mode-map (kbd "cc") 'evil-collection-vterm-change-line)
   )

#+end_src

* Org Mode
** Org Basic Config     

#+begin_src emacs-lisp

(defun my/org-mode-setup()
    (org-indent-mode)
    ;;(visual-line-mode 1)
    )

(use-package org
    :defer t
    :hook (org-mode . my/org-mode-setup)
    :config
    (setq org-ellipsis " ..."
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 0   ;; src blocks won't get a min indentation automatically
          org-startup-folder 'content
          org-directory "~/org/"
          org-agenda-files (list org-directory)
		  org-default-notes-file "~/org/notes.org"
          org-todo-keywords '((sequence "TODO"
                                        "WIP"
                                        "BLOCKED"
                                        "REVIEW"
                                        "|"
                                        "DONE"
                                        "ARCHIVED"))
          org-todo-keyword-faces '(("TODO" . "GreenYellow")
                                   ("WIP" . "Gold")
                                   ("BLOCKED" . "FireBrick")
                                   ("REVIEW" . "Violet"))
          org-return-follows-link t))

(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
         (org-agenda-mode . evil-org-mode)
		 (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))  

#+end_src

** Capture Templates

#+begin_src emacs-lisp

(use-package doct
  :commands (doct))

(setq org-capture-templates
	  (doct '(("Todo" :keys "t"
			   :icon ("checklist" :set "octicon" :color "green")
               :file (lambda () (concat org-directory "todo.org"))
               :prepend t
               :template ("* TODO %^{Description}"
                          ":PROPERTIES:"
                          ":CATEGORY: TODO"
                          ":CREATED: %U"
                          ":END:"
                          "%?"))
	         ("Notes" :keys "n"
			   :icon ("sticky-note-o" :set "octicon" :color "blue")
               :file (lambda () (concat org-directory "notes.org"))
               :prepend t
               :template ("* %^{Description}"
                          ":PROPERTIES:"
                          ":CATEGORY: NOTE"
                          ":CREATED: %U"
                          ":END:"
                          "%?")))))

#+end_src

** Header Bullets

=org-bullets= change the default asterisks for nice looking bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◐" "○" "●" "✖" "✚")))

#+end_src

** Source Code Blocks

Here we enable the list of languages we want code blocks to work with

#+begin_src emacs-lisp

(org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (clojure . t)
      (shell . t)
      (sql . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Toc-Org

toc-org generates tables of contents in the org file on save

#+begin_src emacs-lisp

  (use-package toc-org
      :hook (org-mode . toc-org-mode))

#+end_src

* Org Roam

#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/notes/roam/")
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  :config
  (setq org-roam-node-display-template
        "${title:60} ${tags:*}")
  (org-roam-setup))
#+end_src

* Key Bindings

  I'm using =general.el=, =evil-mode= and =evil-collection= as a base to configure key bidings
 
** General

#+begin_src emacs-lisp

  (use-package general
      :config
      (general-evil-setup t)
      (general-create-definer my/leader-key-def
          :states '(normal insert visual emacs)
          :keymaps 'override
          :prefix "SPC"
          :global-prefix "C-SPC"))

#+end_src
  
** Leader Key =SPC=
   
My leader key is =SPC=, these is what's directly bound to it
    
#+begin_src emacs-lisp

(defun my/find-file()
  "Use project specific find if in project"
  (interactive)
  (if (project-current)
      (project-find-file)
    (consult-fd)))

(defun my/popup-scratch-buffer nil
  "Popup a scratch buffer."
  (interactive)
  (evil-window-split 20)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (lisp-interaction-mode))

(my/leader-key-def
  ;; actions
  "DEL" '(evil-switch-to-windows-last-buffer :which-key "Last buffer")
  "RET" '(consult-bookmark :which-key "Bookmarks")
  "SPC" '(my/find-file :which-key "Find file")
  "<home>" '(dashboard-refresh-buffer :which-key "Switch to Dashboard")
  ";" '(eval-expression :which-key "Eval expression")
  "x" '(my/popup-scratch-buffer :which-key "Pop scratch buffer")
  "X" '(org-capture :which-key "Org Capture"))

#+end_src
    
** Agenda =SPC a=

#+begin_src emacs-lisp

(my/leader-key-def
    "a"  '(:ignore t :which-key "Org Agenda")
    "aa" '(org-agenda :which-key "Agenda")
    "at" '(org-todo-list :which-key "Todo list")
    "am" '(org-tags-view :which-key "Tags view")
    "av" '(org-search-view :which-key "Search view"))

#+end_src

** Buffers =SPC b=

#+begin_src emacs-lisp

(defun my/consult-switch-buffer()
  "Use project specific switcher if in project"
  (interactive)
  (if (project-current)
      (consult-project-buffer)
      (consult-buffer)))

(defun my/kill-matching-buffers-no-confirm (regexp)
 "Kill all buffers matching REGEXP without confirmation."
  (interactive)
  (cl-letf (((symbol-function 'kill-buffer-ask) #'kill-buffer))
    (kill-matching-buffers regexp)))

(defun my/close-all-buffers ()
  "Closes all buffers."
  (interactive)
  ;; (kill-matching-buffers ".*"))
  (cl-loop for buf in (buffer-list)
	if (not (or (string-match "^*dashboard" (buffer-name buf))
				(string-match "^*Messages" (buffer-name buf))
				(string-match "^*scratch" (buffer-name buf))
				(string-match "^ " (buffer-name buf))))
	do (kill-buffer buf))
  (dashboard-refresh-buffer))

(my/leader-key-def
  "b"  '(:ignore t :which-key "buffer")
  "bn" '(next-buffer :which-key "Next buffer")
  "bp" '(previous-buffer :which-key "Previous buffer")
  "bb" '(my/consult-switch-buffer :which-key "Switch buffer")
  "bi" '(ibuffer :which-key "ibuffer")
  "bk" '(kill-current-buffer :which-key "Kill buffer")
  "bl" '(evil-switch-to-windows-last-buffer :which-key "Switch to last buffer")
  "bs" '(basic-save-buffer :which-key "Save buffer")
  "bz" '(bury-buffer :which-key "Bury buffer")
  "bm" '(bookmark-set :which-key "Mark as bookmark")
  "bM" '(bookmark-delete :which-key "Delete bookmark")
  "bR" '(revert-buffer :which-key "Revert buffer")
  "bB" '(consult-buffer :which-key "consult buffer")
  "bK" '(my/close-all-buffers :which-key "Kill all buffers")
  "bN" '(evil-buffer-new :which-key "New buffer"))

#+end_src

** Code =SPC c=

#+begin_src emacs-lisp

  (my/leader-key-def
      "c"  '(:ignore t :which-key "code")
      "c <return>" '(lsp-execute-code-action :which-key "Code Actions")
      "cc" '(project-compile :which-key "Compile")
      "cd" '(lsp-find-definition :which-key "Jump to definition")
      "cr" '(lsp-find-references :which-key "Jump to references")
      "cf" '(my/reformat-buffer :which-key "Format buffer")
      "cl" '(flycheck-list-errors :which-key "List errors")
      "cn" '(flycheck-next-error :which-key "Next error"))

#+end_src

** Eval =SPC e=

#+begin_src emacs-lisp

(my/leader-key-def
    "e"  '(:ignore t :which-key "eval")
    "eb" '(eval-buffer :which-key "Evaluate buffer")
    "ed" '(eval-defun :which-key "Evaluate defun")
    "ee" '(eval-expression :which-key "Evaluate expression")
    "el" '(eval-last-sexp :which-key "Evaluate last sexpression")
    "er" '(eval-region :which-key "Evaluate region"))

#+end_src

** Dired =SPC d=

#+begin_src emacs-lisp
(my/leader-key-def
  "d"  '(find-file :which-key "here"))
#+end_src

** Files =SPC f=

#+begin_src emacs-lisp

(my/leader-key-def
    "f"  '(:ignore t :which-key "files")
    "ff" '(find-file :which-key "Find file")
    "fl" '(consult-locate :which-key "Locate file")
    "fr" '(consult-recent-file :which-key "Recent files")
    "fs" '(save-buffer :which-key "Save file")
    "fy" '(my/copy-filename-to-clipboard :which-key "Yank filename")
    "fC" '(copy-file :which-key "Copy this file")
    "fD" '(delete-file :which-key "Delete this file")
    "fR" '(rename-file :which-key "Rename/Move file")
    "fS" '(write-file :which-key "Save file as..."))

#+end_src

** Git =SPC g=

#+begin_src emacs-lisp

(defun my/kill-magit-buffers()
  "Kills all magit buffers"
  (interactive)
  (my/kill-matching-buffers-no-confirm "^magit.*"))

(my/leader-key-def
  "g"  '(:ignore t :which-key "git")
  "gg" '(magit-status :which-key "Magit status")
  "g/" '(magit-dispatch :which-key "Magit dispatch")
  "gb" '(magit-branch-checkout :which-key "Magit switch branch")
  "gC" '(magit-clone :which-key "Magit clone")
  "gD" '(magit-file-delete :which-key "Magit file delete")
  "gR" '(vc-revert :which-key "Revert file")
  "gS" '(magit-stage-file :which-key "Magit stage file")
  "gK" '(my/kill-magit-buffers :which-key "Kill all magit buffers")
  "gU" '(magit-unstage-file :which-key "Magit unstage file"))

#+end_src

** Help =SPC h=

#+begin_src emacs-lisp

  (my/leader-key-def
      "h"  '(:ignore t :which-key "help")
      "h <return>" '(info-emacs-manual :which-key "Emacs manual")
      "h'" '(describe-char :which-key "Describe char")
      "h." '(display-local-help :which-key "Local-help")
      "h?" '(help-for-help :which-key "Help for help")
      "ha" '(apropos :which-key "Apropos")
      "hc" '(describe-key-briefly :which-key "Describe key briefly")
      "he" '(view-echo-area-messages :which-key "View echo messages")
      "hf" '(describe-function :which-key "Describe function")
      "hi" '(info :which-key "Info")
      "hk" '(describe-key :which-key "Describe key")
      "hl" '(view-lossage :which-key "View lossage")
      "hm" '(describe-mode :which-key "Describe mode")
      "hs" '(describe-symbol :which-key "Describe symbol")
      "hq" '(help-quit :which-key "Help quit")
      "hv" '(describe-variable :which-key "Describe variable")
      "hw" '(where-is :which-key "Where is")
      "hA" '(apropos-documentation :which-key "Apropos docs")
      "hC" '(describe-coding-system :which-key "Describe coding system")
      "hF" '(describe-face :which-key "Describe face")
      "hV" '(set-variable :which-key "Set variable")
      "hH" '(help-for-help :which-key "Help for help"))

#+end_src

** Kubernetes =SPC k=

TODO: Might be worth adding keybinds to the logs popup, etc

#+begin_src emacs-lisp
;; (defun my/k8s-pods()
;;     (kubel-open ))

(defun my/kill-kubel-buffers()
    "Kill all kubel buffers"
    (interactive)
    (my/kill-matching-buffers-no-confirm "^\\*kubel.*\\*"))

(my/leader-key-def
    "k"  '(:ignore t :which-key "Kubernetes")
    "kk" '(kubel :which-key "k8s")
    "kK" '(my/kill-kubel-buffers :which-key "Kill kubel buffers"))
    ;; "kl" '(kubel-open :which-key "k8s Logs"))

#+end_src
** Notes =SPC n=
   
#+begin_src emacs-lisp

;; TODO add note filtering functions here

(my/leader-key-def
    "n"  '(:ignore t :which-key "notes")
    "nn" '(org-capture :which-key "Org Capture")
    "ni" '(org-roam-node-insert :which-key "org-roam-node-insert")
    "nf" '(org-roam-node-find :which-key "org-roam-node-find")
    "nt" '(org-roam-tag-add :which-key "Add a TAG")
    "nl" '(org-roam-buffer-toggle :which-key "org-roam-buffer-toggle"))

#+end_src

** Open =SPC o=

#+begin_src emacs-lisp

(defun my/vterm-toggle()
  (interactive)
  (if (project-current)
      (let ((default-directory (project-root (project-current))))
        (vterm-other-window))
    (vterm-other-window)))

(defun my/vterm-here()
  (interactive)
  (vterm-other-window vterm-buffer-name))

(my/leader-key-def
    "o"  '(:ignore t :which-key "open")
    "o-" '(dired-jump :which-key "Dired")
    "ob" '(browse-url-of-file :which-key "Browser")
    ;o; "d" '(org :which-key "debugger")
    "of" '(make-frame :which-key "New frame")
    "om" '(mu4e :which-key "Mu4e")
    ;o; "r" '(org :which-key "REPL")
    "oe" '(eshell-toggle :which-key "eshell")
    "ot" '(my/vterm-toggle :which-key "toggle-vterm")
    "oT" '(my/vterm-here :which-key "vterm-here")
    )

#+end_src

** Projects =SPC p=
   
#+begin_src emacs-lisp

(defun my/switch-project-dired()
 "Switch to a project and open dired in the project root."
 (interactive)
 (let ((project (project-prompt-project-dir)))
    (when project
      (dired (expand-file-name project)))))

(my/leader-key-def
    "p"  '(:ignore t :which-key "projects")
    "pb" '(consult-project-buffer :which-key "Switch project buffer")
    "pd" '(project-dired :which-key "dired in project")
    "pf" '(consult-fd :which-key "Find file in project")
    "pk" '(project-kill-buffers :which-key "Kill project buffers")
    "pp" '(my/switch-project-dired :which-key "Switch project") 
    "pt" '(magit-todos-list :which-key "Project TODOs")
    "pD" '(project-forget-project :which-key "Forget project"))

#+end_src

** Quit =SPC q=

#+begin_src emacs-lisp

  (my/leader-key-def
      "q"  '(:ignore t :which-key "quit")
      "qq" '(save-buffers-kill-terminal :which-key "Quit"))

#+end_src

** Search =SPC s=

#+begin_src emacs-lisp

(my/leader-key-def
    "s"  '(:ignore t :which-key "search")
    "ss" '(rg-dwim :which-key "ripgrep simple")
    "sS" '(rg-menu :which-key "ripgrep menu")
    "sp" '(rg-project :which-key "ripgrep project")
    "sl" '(rg-literal :which-key "ripgrep literal anywhere")
    "sr" '(rg--transient :which-key "ripgrep regex anywhere")
    "s/" '(consult-ripgrep :which-key "ripgrep dwim"))

#+end_src

** Toggle =SPC t=
   
#+begin_src emacs-lisp

(my/leader-key-def
    "t"  '(:ignore t :which-key "toggle")
    "tf" '(flycheck-mode :which-key "Flycheck")
    "tl" '(doom/toggle-line-numbers :which-key "Line numbers")
    "tt" '(toggle-truncate-lines :which-key "Truncate lines")
    "tI" '(doom/toggle-indent-style :which-key "Indentation"))

#+end_src

** Embark Action =SPC l=

#+begin_src emacs-lisp
(my/leader-key-def
    "l" '(embark-act :which-key "Embark Act"))
#+end_src>

** Window Management =SPC w=
    
Using =rotate= to move windows around

#+begin_src emacs-lisp

  (use-package rotate)

#+end_src
   
I prefer the focus to go into the newly split buffers

#+begin_src emacs-lisp

  (setq evil-vsplit-window-right t
        evil-split-window-below t)

#+end_src

Window management keybindings, =SPC w=:

#+begin_src emacs-lisp

  (my/leader-key-def
      "w"  '(:ignore t :which-key "window")
      "w+"  '(evil-window-increase-height :which-key "increase height")
      "w-"  '(evil-window-decrease-height :which-key "decrease height")
      "w>"  '(evil-window-increase-width :which-key "increase width")
      "w<"  '(evil-window-decrease-width :which-key "decrease width")
      "ww"  '(evil-window-next :which-key "next")
      "wW"  '(evil-window-prev :which-key "prev")
      "w_"  '(evil-window-set-height :which-key "set height")
      "wc"  '(evil-window-delete :which-key "delete")
      "wh"  '(evil-window-left :which-key "cursor left")
      "wj"  '(evil-window-down :which-key "cursor down")
      "wk"  '(evil-window-up :which-key "cursor up")
      "wl"  '(evil-window-right :which-key "cursor right")
      "wn"  '(evil-window-new :which-key "new")
      "wo"  '(delete-other-windows :which-key "delete others")
      "wq"  '(evil-quit- :which-key "quit")
      "ws"  '(evil-window-split :which-key "horizontal split")
      "wv"  '(evil-window-vsplit :which-key "vertical split")
      "ww"  '(evil-window-next :which-key "next")
      "w|"  '(evil-window-set-width :which-key "set width")
      "wp"  '(evil-window-prev :which-key "prev")
      "wSPC" '(rotate-layout :which-key "rotate layout")
      "wr" '(rotate-window :which-key "rotate windows")
      "w <up>" '(evil-window-up :which-key "cursor up")
      "w <down>" '(evil-window-down :which-key "cursor down")
      "w <left>" '(evil-window-left :which-key "cursor left")
      "w <right>" '(evil-window-right :which-key "cursor right")
      "w C-<up>" '(windmove-swap-states-up :which-key "move window up")
      "w C-<down>" '(windmove-swap-states-down :which-key "move window down")
      "w C-<left>" '(windmove-swap-states-left :which-key "move window left")
      "w C-<right>" '(windmove-swap-states-right :which-key "move window right"))

#+end_src

Enabling winner-mode by default, it lets you switch between window configurations. I map them to =SPC arrow= keys
   
#+begin_src emacs-lisp

  (use-package winner
      :after evil
      :config
      (winner-mode)
      (my/leader-key-def
          "<left>" '(winner-undo :which-key "winner undo")
          "<right>" '(winner-redo :which-key "winner redo")))

#+end_src
   
** Other KeyBindings

Other keybindings not strictly related to =SPC=

*** Home & End keys

In macOS Home & End keys are stupid and move along the whole document, i like
that they move per line, evil takes care of 

#+begin_src emacs-lisp

(general-define-key    
    :states 'insert
    "<home>" 'beginning-of-line
    "<end>"  'end-of-line)

#+end_src
   
*** KeyBinding Help with =?= 

#+begin_src emacs-lisp

(general-define-key    
    :states 'normal
    "?" 'which-key-show-major-mode)

#+end_src

*** Line Search

#+begin_src emacs-lisp

(general-define-key
 :states '(normal insert visual)
 "C-s" 'consult-line)

(general-define-key
 :states '(normal visual)
 "/" 'consult-line)

#+end_src

*** Drag stuff

drag-stuff with =M-<arrows>=

#+begin_src emacs-lisp

(use-package drag-stuff)
(drag-stuff-global-mode 1)

#+end_src

*** =RET= DWIM in org-mode

In doom emacs, =RET= on org mode can be used for plenty of stuff

#+begin_src emacs-lisp

  (general-define-key
      :states 'normal
      :keymaps 'org-mode-map
      "RET" '+org/dwim-at-point)

#+end_src

* envrc

Envrc to enable direnv goodness per buffer

Doing this late in the init as recommended [[https://github.com/purcell/envrc][here]]

#+begin_src emacs-lisp
(use-package envrc
  :config
  (envrc-global-mode))
#+end_src

* Auto Literate Config

This function automatically tangles =config.org= (into =init.el=) whenever we save it
It will do it for any =.org= file in our emac's home directory, straight from system crafter's config

#+begin_src emacs-lisp


(defun my/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))

#+end_src




