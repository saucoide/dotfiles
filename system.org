#+TITLE: Macbook's configuration
#+AUTHOR: Sauco
#+DESCRIPTION: work's macbook system config
#+STARTUP: content

* Introduction

For now i'm using amethyst as a tiling window manager, pending to try yabai

It is a literate config written in org-mode, use =org-babel-tangle= to
write the code blocks to their location.

My emacs configuration is in a separate [[emacs_config.org][]] file.

I then use GNU Stow to symlink everything inside =~/dotfiles= into the home directory by

#+BEGIN_SRC bash
stow .
#+END_SRC

* WIP NIX

Still a work in progress, but moving all installed software to nix using ~nix
profile~. And =flake.nix= flakes in each project for the development
environment

I am not yet using home-manager or nix-darwin so im installing global packages
imperatively.

In the future i'll try to move this to be truly declarative, for now, i just
install the list.

* Software

software I've installed via homebrew

#+begin_src sh :tangle software_install.sh

# gui
brew install --cask amethyst                    # Tiling window manager
brew install --cask flameshot                   # Screenshot utility
brew install --cask marta                       # File manager
brew install --cask font-jetbrains-mono         # Font
brew install --cask font-source-code-pro        # Font
brew install --cask teamviewer                  # To enable remote connection

# cli
brew install alacritty                          # The terminal i use
brew install fish                               # My shell of choice
brew install starship                           # A nice prompt for my shell
brew install lsd                                # A better `ls`
brew install broot
brew install htop                               # htop
brew install tree                               # htop
brew install ripgrep                            # grep everything
brew install neofetch                           # neofetch
brew install neovim                             # Terminal text editor
brew install ranger                             # Terminal file manager
brew install stow                               # To organize my dotfiles
brew install miniconda                          # python package manager
brew install jq                                 # json cli processor

# window manager
brew install koekeishiya/formulae/yabai --HEAD  # Tiling window manager
brew install koekeishiya/formulae/skhd          # key binding remapping
brew install --cask ubersicht                   # top bar replacement w/ yabai
# simple bar lite 
git clone https://github.com/Jean-Tinland/simple-bar-lite $HOME/Library/Application\ Support/Ãœbersicht/widgets/simple-bar-lite
# This is basically xrandr for macOS
brew tap jakehilborn/jakehilborn && brew install displayplacer
#+end_src

* Keyboard shortcuts

I'm using skhd to handle shortcuts and key remappings

** skhd

#+begin_src conf :tangle .config/skhd/skhdrc

# -- launchers --
ctrl + alt - t : $HOME/.nix-profile/Applications/Alacritty.app/Contents/MacOS/alacritty
ctrl + alt - n : /usr/local/bin/emacsclient -c -a ""

# remap flameshot hardcoded keybinding for screenshots (pre 0.11)
ctrl + alt - p : skhd -k "cmd + alt + shift - 0x15"

# kill window
cmd - k : skhd -k "cmd - q"

# fixing copy paste
ctrl - c ["emacsclient" ~
          "Emacs" ~
          "emacs" ~
          "alacritty" ~
          ,* : skhd -k "cmd - c"
]
ctrl - v ["emacsclient" ~
          "Emacs" ~
          "emacs" ~
          "alacritty" ~
          "pycharm" ~
          ,* : skhd -k "cmd - v"
]


# macOS stops recognizing my external screen if i switch from until i tweak a setting
ctrl + cmd + alt - r : displayplacer "id:E0E4A8A2-F420-D885-A57C-1104BE04395F+67AC2230-7465-912E-988E-6E740CE16ADA res:1920x1080 hz:50 color_depth:8 scaling:off origin:(0,0) degree:0" & displayplacer "id:E0E4A8A2-F420-D885-A57C-1104BE04395F+67AC2230-7465-912E-988E-6E740CE16ADA res:1920x1080 hz:60 color_depth:8 scaling:off origin:(0,0) degree:0"
 
ctrl + cmd + alt - t : displayplacer "id:E0E4A8A2-F420-D885-A57C-1104BE04395F+67AC2230-7465-912E-988E-6E740CE16ADA res:1920x1080 hz:60 color_depth:8 scaling:off origin:(0,0) degree:0"
     
     
# -- yabai --

## Set Layout
cmd - t : yabai -m space --layout bsp
cmd - m : yabai -m space --layout stack
cmd - f : yabai -m space --layout float
      
## Move Spaces
cmd - backspace : yabai -m space --focus recent
cmd + alt - left : yabai -m space --focus prev
cmd + alt - right : yabai -m space --focus next
cmd - 0x12 : yabai -m space --focus 1
cmd - 0x13 : yabai -m space --focus 2
cmd - 0x14 : yabai -m space --focus 3
cmd - 0x15 : yabai -m space --focus 4
cmd - 0x17 : yabai -m space --focus 5
cmd - 0x16 : yabai -m space --focus 6
cmd - 0x1A : yabai -m space --focus 7
cmd - 0x1C : yabai -m space --focus 8
cmd - 0x19 : yabai -m space --focus 9
cmd - 0x53 : yabai -m space --focus 1
cmd - 0x54 : yabai -m space --focus 2
cmd - 0x55 : yabai -m space --focus 3
cmd - 0x56 : yabai -m space --focus 4
cmd - 0x57 : yabai -m space --focus 5
cmd - 0x58 : yabai -m space --focus 6
cmd - 0x59 : yabai -m space --focus 7
cmd - 0x5B : yabai -m space --focus 8
cmd - 0x5C : yabai -m space --focus 9
    
      
## Move Windows to Space & Focus
### Number row
cmd + shift - 0x12 : yabai -m window --space 1; yabai -m space --focus 1
cmd + shift - 0x13 : yabai -m window --space 2; yabai -m space --focus 2
cmd + shift - 0x14 : yabai -m window --space 3; yabai -m space --focus 3
cmd + shift - 0x15 : yabai -m window --space 4; yabai -m space --focus 4
cmd + shift - 0x17 : yabai -m window --space 5; yabai -m space --focus 5
cmd + shift - 0x16 : yabai -m window --space 6; yabai -m space --focus 6
cmd + shift - 0x1A : yabai -m window --space 7; yabai -m space --focus 7
cmd + shift - 0x1C : yabai -m window --space 8; yabai -m space --focus 8
cmd + shift - 0x19 : yabai -m window --space 9; yabai -m space --focus 9

### Numpad    
cmd + shift - 0x53 : yabai -m window --space 1; yabai -m space --focus 1
cmd + shift - 0x54 : yabai -m window --space 2; yabai -m space --focus 2
cmd + shift - 0x55 : yabai -m window --space 3; yabai -m space --focus 3
cmd + shift - 0x56 : yabai -m window --space 4; yabai -m space --focus 4
cmd + shift - 0x57 : yabai -m window --space 5; yabai -m space --focus 5
cmd + shift - 0x58 : yabai -m window --space 6; yabai -m space --focus 6
cmd + shift - 0x59 : yabai -m window --space 7; yabai -m space --focus 7
cmd + shift - 0x5B : yabai -m window --space 8; yabai -m space --focus 8
cmd + shift - 0x5C : yabai -m window --space 9; yabai -m space --focus 9

## Move Windows to Space
### Number row
ctrl + cmd - 0x12 : yabai -m window --space 1
ctrl + cmd - 0x13 : yabai -m window --space 2
ctrl + cmd - 0x14 : yabai -m window --space 3
ctrl + cmd - 0x15 : yabai -m window --space 4
ctrl + cmd - 0x17 : yabai -m window --space 5
ctrl + cmd - 0x16 : yabai -m window --space 6
ctrl + cmd - 0x1A : yabai -m window --space 7
ctrl + cmd - 0x1C : yabai -m window --space 8
ctrl + cmd - 0x19 : yabai -m window --space 9

### Numpad    
ctrl + cmd - 0x53 : yabai -m window --space 1
ctrl + cmd - 0x54 : yabai -m window --space 2
ctrl + cmd - 0x55 : yabai -m window --space 3
ctrl + cmd - 0x56 : yabai -m window --space 4
ctrl + cmd - 0x57 : yabai -m window --space 5
ctrl + cmd - 0x58 : yabai -m window --space 6
ctrl + cmd - 0x59 : yabai -m window --space 7
ctrl + cmd - 0x5B : yabai -m window --space 8
ctrl + cmd - 0x5C : yabai -m window --space 9

## Move Windows
shift + cmd - up : yabai -m window --swap prev
shift + cmd - down : yabai -m window --swap next
shift + cmd - right : yabai -m window --warp next
shift + cmd - left : yabai -m window --warp prev
    
## Window Focus
### Navigation
cmd - h : [[ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]]\
          && yabai -m window --focus prev\
          || yabai -m window --focus stack.prev
cmd - j : [[ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]]\
          && yabai -m window --focus next\
          || yabai -m window --focus stack.prev
cmd - k : [[ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]]\
          && yabai -m window --focus prev\
          || yabai -m window --focus stack.next
cmd - l : [[ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]]\
          && yabai -m window --focus next\
          || yabai -m window --focus stack.next
cmd - left : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus prev || yabai -m window --focus stack.prev;end
cmd - down : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus next || yabai -m window --focus stack.prev;end
cmd - up : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus prev || yabai -m window --focus stack.next;end
cmd - right : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ];yabai -m window --focus next || yabai -m window --focus stack.next;end



# Float / Unfloat window
cmd + shift - f : yabai -m window --toggle float
# Make window sticky (all spaces)
cmd + shift - 0x43 : yabai -m window --toggle sticky 
cmd + shift -b : yabai -m window --toggle border

## Resize Windows
ctrl + cmd - 0x18 : yabai -m space --balance

# Resize windows
ctrl + cmd - left : yabai -m window --resize left:-75:0; \
                  yabai -m window --resize right:-74:0
ctrl + cmd - down : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:75
ctrl + cmd - up : yabai -m window --resize top:0:-75; \
                  yabai -m window --resize bottom:0:-75
ctrl + cmd - right : yabai -m window --resize right:75:0; \
                  yabai -m window --resize left:75:0

#+end_src

** MacOS defaultkeybidings

Some macos applications use this file for key bindings, here i'm changing the behavior of
~home~ and ~end~

#+begin_src conf :tangle ~/Library/KeyBindings/DefaultKeyBinding.dict
{
  "\UF729"  = moveToBeginningOfLine:;
  "\UF72B"  = moveToEndOfLine:;
  "$\UF729" = moveToBeginningOfLineAndModifySelection:;
  "$\UF72B" = moveToEndOfLineAndModifySelection:;
}
#+end_src

* Yabai

I'm using yabai for now ~yabai &;disown~ if brew services doesnt launch it

#+begin_src conf :tangle .config/yabai/yabairc :tangle-mode (identity #o755)

# this is needed to load the scripting additions, might need to run manually
sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

# ===== gaps ======
gaps["top"]="2"
gaps["bottom"]="2"
gaps["left"]="2"
gaps["right"]="2"
gaps["inner"]="2"

# ===== Tiling setting ======

yabai -m config layout                      bsp

yabai -m config top_padding                 "${gaps["top"]}"
yabai -m config bottom_padding              "${gaps["bottom"]}"
yabai -m config left_padding                "${gaps["left"]}"
yabai -m config right_padding               "${gaps["right"]}"
yabai -m config window_gap                  "${gaps["inner"]}"
yabai -m config external_bar                all:25:0

yabai -m config mouse_follows_focus         off
yabai -m config focus_follows_mouse         off

yabai -m config window_opacity              off
yabai -m config window_shadow               float

yabai -m config active_window_opacity       1.0
yabai -m config normal_window_opacity       0.90
yabai -m config split_ratio                 0.66

yabai -m config auto_balance                off

yabai -m config mouse_modifier              alt
yabai -m config mouse_action1               move
yabai -m config mouse_action2               resize


# ===== Rules =======

# These are misbehaving apps that freeze when managed
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="flameshot" app="^Flameshot$" title=".*" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Finder" app="^Finder$" manage=off
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="App Store" app="^App Store$" manage=off
yabai -m rule --add label="Activity Monitor" app="^Activity Monitor$" manage=off
yabai -m rule --add label="Calculator" app="^Calculator$" manage=off
yabai -m rule --add label="Software Update" title="Software Update" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add app="^zoom.us" manage=off
# yabai -m rule --add app="Emacs" manage=on

# === Top Bar ===
sketchybar &
# === Borders ===
borders active_color=0xff50fa7b inactive_color=0xff494d64 width=3.0 2>/dev/null 1>&2 &
#+end_src

* Python

i like to also used ipdb as default breakpoint
~export PYTHONBREAKPOINT=ipdb.set_trace~

** .pdbrc
#+begin_src python :tangle .pdbrc
# Install IPython: python3 -m pip install ipython

import IPython
from traitlets.config import get_config

cfg = get_config()
cfg.InteractiveShellEmbed.colors = "Linux"  # syntax highlighting
cfg.InteractiveShellEmbed.confirm_exit = False

alias interacti IPython.embed(config=cfg)

#+end_src

** .pythonrc.py

#+begin_src python :tangle .pythonrc.py

from functools import partial
try:
    from rich import inspect, pretty, print
    help = partial(inspect, help=True)
    pretty.install()
except:
    pass
#+end_src

* Postgres
** pgcli

#+begin_src conf :tangle .config/pgcli/config

# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled, all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = False

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = True

# If multi_line_mode is set to "psql", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to "safe", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = psql

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database",
# "shutdown", "delete", or "update".
# Possible values:
# "all" - warn on data definition statements, server actions such as SHUTDOWN, DELETE or UPDATE
# "moderate" - skip warning on UPDATE statements, except for unconditional updates
# "off" - skip all warnings
destructive_warning = all

# Enables expand mode, which is similar to `\x` in psql.
expand = False

# Enables auto expand mode, which is similar to `\x auto` in psql.
auto_expand = True

# If set to True, table suggestions will include a table alias
generate_aliases = False

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = default

# keyword casing preference. Possible values: "lower", "upper", "auto"
keyword_casing = auto

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = False

# Casing of column headers based on the casing_file described above
case_column_headers = True

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = default

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = INFO

# Order of columns when expanding * to column list
# Possible values: "table_order" and "alphabetic"
asterisk_column_order = table_order

# Whether to qualify with table alias/name when suggesting columns
# Possible values: "always", "never" and "if_more_than_one_table"
qualify_columns = if_more_than_one_table

# When no schema is entered, only suggest objects in search_path
search_path_filter = False

# Default pager.
# By default 'PAGER' environment variable is used
# pager = less -SRXF

# Timing of sql statements and table rendering.
timing = True

# Show/hide the informational toolbar with function keymap at the footer.
show_bottom_toolbar = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv, sql-insert, sql-update,
# sql-update-1, sql-update-2 (formatter with sql-* prefix can format query
# output to executable insertion or updating sql).
# Recommended: psql, fancy_grid and grid.
table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = default

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = True

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values "STOP" or "RESUME"
on_error = STOP

# Set threshold for row limit. Use 0 to disable limiting.
row_limit = 1000

# Truncate long text fields to this value for tabular display (does not apply to csv).
# Leave unset to disable truncation. Example: "max_field_width = "
# Be aware that formatting might get slow with values larger than 500 and tables with
# lots of records.
max_field_width = 500

# Skip intro on startup and goodbye on exit
less_chatty = False

# Postgres prompt
# \t - Current date and time
# \u - Username
# \h - Short hostname of the server (up to first '.')
# \H - Hostname of the server
# \d - Database name
# \p - Database port
# \i - Postgres PID
# \# - "@" sign if logged in as superuser, '>' in other case
# \n - Newline
# \dsn_alias - name of dsn alias if -D option is used (empty otherwise)
# \x1b[...m - insert ANSI escape sequence
# eg: prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
# prompt = '\u@\h:\d> '
prompt = '\x1b[1m\u on \h@\x1b[38;5;82m\d\x1b[;37m\nâžœ '

# Number of lines to reserve for the suggestion menu
min_num_menu_lines = 4

# Character used to left pad multi-line queries to match the prompt size.
multiline_continuation_char = ''

# The string used in place of a null value.
null_string = '<null>'

# manage pager on startup
enable_pager = True

# Use keyring to automatically save and load password in a secure manner
keyring = True

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = 'bg:#ffffff #000000'
completion-menu.completion = 'bg:#008888 #ffffff'
completion-menu.meta.completion.current = 'bg:#44aaaa #000000'
completion-menu.meta.completion = 'bg:#448888 #ffffff'
completion-menu.multi-column-meta = 'bg:#aaffff #000000'
scrollbar.arrow = 'bg:#003333'
scrollbar = 'bg:#00aaaa'
selected = '#ffffff bg:#6666aa'
search = '#ffffff bg:#4444aa'
search.current = '#ffffff bg:#44aa44'
bottom-toolbar = 'bg:#222222 #aaaaaa'
bottom-toolbar.off = 'bg:#222222 #888888'
bottom-toolbar.on = 'bg:#222222 #ffffff'
search-toolbar = 'noinherit bold'
search-toolbar.text = 'nobold'
system-toolbar = 'noinherit bold'
arg-toolbar = 'noinherit bold'
arg-toolbar.text = 'nobold'
bottom-toolbar.transaction.valid = 'bg:#222222 #00ff5f bold'
bottom-toolbar.transaction.failed = 'bg:#222222 #ff005f bold'
# These three values can be used to further refine the syntax highlighting.
# They are commented out by default, since they have priority over the theme set
# with the `syntax_style` setting and overriding its behavior can be confusing.
# literal.string = '#ba2121'
# literal.number = '#666666'
# keyword = 'bold #008000'

# style classes for colored table output
output.header = "#00ff5f bold"
output.odd-row = ""
output.even-row = ""
output.null = "#808080"

# Named queries are queries you can execute by name.
[named queries]

# DSN to call by -D option
[alias_dsn]
# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]

# Format for number representation
# for decimal "d" - 12345678, ",d" - 12,345,678
# for float "g" - 123456.78, ",g" - 123,456.78
[data_formats]
decimal = ""
float = ""

#+end_src

* .profile

#+begin_src sh :tangle .profile

export PYTHONBREAKPOINT=ipdb.set_trace
export PYTHONSTARTUP=$HOME/.pythonrc.py
export EDITOR="emacsclient -t --alternate-editor=''"
export SSH_ENV="$HOME/.ssh/agent-environment"
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

#+end_src

* Terminal

I'm using alacritty as my terminal

** Alacritty

#+BEGIN_SRC yaml :tangle .config/alacritty/alacritty.yml
#
# Generated from ~/dotfiles/system.org
#
# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:

  # Background opacity
  #
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 1.0
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  #  columns: 0
  #  lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 6
    y: 6

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: buttonless

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  #startup_mode: Windowed

  # Window title
  title: Alacritty

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 5000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  #multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  #auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
#tabspaces: 8

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    # family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    family: JetBrainsMono Nerd Font Mono
    # family: UbuntuMono Nerd Font
    # family: Monofur Nerd Font
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    family: JetBrainsMono Nerd Font Mono
    # family: UbuntuMono Nerd Font
    # family: Monofur Nerd Font
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    family: JetBrainsMono Nerd Font Mono
    # family: UbuntuMono Nerd Font
    # family: Monofuritalic Nerd Font Mono
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    # family: Source Code Pro
    # family: CodeNewRoman Nerd Font
    # family: RobotoMono Nerd Font
    # family: Hack
    family: JetBrainsMono Nerd Font Mono
    # family: UbuntuMono Nerd Font
    # family: Monofuritalic Nerd Font Mono
    # family: TerminessTTF Nerd Font
    # family: Mononoki Nerd Font

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  size: 12.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  #glyph_offset:
  #  x: 0
  #  y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  #use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

#######################################
##      START OF COLOR SCHEMES       ##
#######################################
schemes:
  ### Doom One ###
  DoomOne: &DoomOne
    primary:
      background: '#282c34'
      foreground: '#bbc2cf'
    cursor:
      text: CellBackground
      cursor: '#528bff'
    selection:
      text: CellForeground
      background: '#3e4451'
    normal:
      black:   '#1c1f24'
      red:     '#ff6c6b'
      green:   '#98be65'
      yellow:  '#da8548'
      blue:    '#51afef'
      magenta: '#c678dd'
      cyan:    '#5699af'
      white:   '#202328'
    bright:
      black:   '#5b6268'
      red:     '#da8548'
      green:   '#4db5bd'
      yellow:  '#ecbe7b'
      blue:    '#3071db'   # This is 2257a0 in Doom Emacs but I lightened it.
      magenta: '#a9a1e1'
      cyan:    '#46d9ff'
      white:   '#dfdfdf'

  ### Dracula ###
  Dracula: &Dracula
    primary:
      background: '#282a36'
      foreground: '#f8f8f2'
    cursor:
      text: CellBackground
      cursor: CellForeground
    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground
    search:
      matches:
        foreground: '#44475a'
        background: '#50fa7b'
      focused_match:
        foreground: '#44475a'
        background: '#ffb86c'
      bar:
        background: '#282a36'
        foreground: '#f8f8f2'
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: '#44475a'
    normal:
      black:   '#000000'
      red:     '#ff5555'
      green:   '#50fa7b'
      yellow:  '#f1fa8c'
      blue:    '#bd93f9'
      magenta: '#ff79c6'
      cyan:    '#8be9fd'
      white:   '#bfbfbf'
    bright:
      black:   '#4d4d4d'
      red:     '#ff6e67'
      green:   '#5af78e'
      yellow:  '#f4f99d'
      blue:    '#caa9fa'
      magenta: '#ff92d0'
      cyan:    '#9aedfe'
      white:   '#e6e6e6'
    dim:
      black:   '#14151b'
      red:     '#ff2222'
      green:   '#1ef956'
      yellow:  '#ebf85b'
      blue:    '#4d5b86'
      magenta: '#ff46b0'
      cyan:    '#59dffc'
      white:   '#e6e6d1'

  ### Gruvbox dark ###
  GruvboxDark: &GruvboxDark
    # Default colors
    primary:
      # hard contrast: background = '0x1d2021'
      background: '#282828'
      # soft contrast: background = '0x32302f'
      foreground: '#ebdbb2'

    # Normal colors
    normal:
      black:   '#282828'
      red:     '#cc241d'
      green:   '#98971a'
      yellow:  '#d79921'
      blue:    '#458588'
      magenta: '#b16286'
      cyan:    '#689d6a'
      white:   '#a89984'

    # Bright colors
    bright:
      black:   '#928374'
      red:     '#fb4934'
      green:   '#b8bb26'
      yellow:  '#fabd2f'
      blue:    '#83a598'
      magenta: '#d3869b'
      cyan:    '#8ec07c'
      white:   '#ebdbb2'

### Monokai ###
  MonokaiPro: &MonokaiPro
    # Default colors
    primary:
      background: '#2D2A2E'
      foreground: '#FCFCFA'

    # Normal colors
    normal:
      black:   '#403E41'
      red:     '#FF6188'
      green:   '#A9DC76'
      yellow:  '#FFD866'
      blue:    '#FC9867'
      magenta: '#AB9DF2'
      cyan:    '#78DCE8'
      white:   '#FCFCFA'

    # Bright colors
    bright:
      black:   '#727072'
      red:     '#FF6188'
      green:   '#A9DC76'
      yellow:  '#FFD866'
      blue:    '#FC9867'
      magenta: '#AB9DF2'
      cyan:    '#78DCE8'
      white:   '#FCFCFA'

  ### Nord ###
  Nord: &Nord
    # Default colors
    primary:
      background: '#2E3440'
      foreground: '#D8DEE9'

    # Normal colors
    normal:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'

    # Bright colors
    bright:
      black:   '#4C566A'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#8FBCBB'
      white:   '#ECEFF4'

  ### Oceanic Next ###
  OceanicNext: &OceanicNext
    # Default colors
    primary:
      background: '#1b2b34'
      foreground: '#d8dee9'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#1b2b34'
      cursor: '#ffffff'

    # Normal colors
    normal:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'

    # Bright colors
    bright:
      black:   '#343d46'
      red:     '#EC5f67'
      green:   '#99C794'
      yellow:  '#FAC863'
      blue:    '#6699cc'
      magenta: '#c594c5'
      cyan:    '#5fb3b3'
      white:   '#d8dee9'

  ### Palenight ###
  Palenight: &Palenight
    # Default colors
    primary:
      background: '#292d3e'
      foreground: '#d0d0d0'

    # Normal colors
    normal:
      black:   '#292d3e'
      red:     '#f07178'
      green:   '#c3e88d'
      yellow:  '#ffcb6b'
      blue:    '#82aaff'
      magenta: '#c792ea'
      cyan:    '#89ddff'
      white:   '#d0d0d0'

    # Bright colors
    bright:
      black:   '#434758'
      red:     '#ff8b92'
      green:   '#ddffa7'
      yellow:  '#ffe585'
      blue:    '#9cc4ff'
      magenta: '#e1acff'
      cyan:    '#a3f7ff'
      white:   '#ffffff'

  ### Solarized Dark ###
  SolarizedDark: &SolarizedDark
    # Default colors
    primary:
      background: '#002b36' # base03
      foreground: '#839496' # base0

    # Cursor colors
    cursor:
      text:   '#002b36' # base03
      cursor: '#839496' # base0

    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2

    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

  ### Solarized Light ###
  SolarizedLight: &SolarizedLight
    # Default colors
    primary:
      background: '#fdf6e3' # base3
      foreground: '#657b83' # base00

    # Cursor colors
    cursor:
      text:   '#fdf6e3' # base3
      cursor: '#657b83' # base00

    # Normal colors
    normal:
      black:   '#073642' # base02
      red:     '#dc322f' # red
      green:   '#859900' # green
      yellow:  '#b58900' # yellow
      blue:    '#268bd2' # blue
      magenta: '#d33682' # magenta
      cyan:    '#2aa198' # cyan
      white:   '#eee8d5' # base2

    # Bright colors
    bright:
      black:   '#002b36' # base03
      red:     '#cb4b16' # orange
      green:   '#586e75' # base01
      yellow:  '#657b83' # base00
      blue:    '#839496' # base0
      magenta: '#6c71c4' # violet
      cyan:    '#93a1a1' # base1
      white:   '#fdf6e3' # base3

  ### Tomorrow Night ###
  TomorrowNight: &TomorrowNight
     # Default colors
    primary:
      background: '#1d1f21'
      foreground: '#c5c8c6'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text: '#1d1f21'
      cursor: '#ffffff'

    # Normal colors
    normal:
      black:   '#1d1f21'
      red:     '#cc6666'
      green:   '#b5bd68'
      yellow:  '#e6c547'
      blue:    '#81a2be'
      magenta: '#b294bb'
      cyan:    '#70c0ba'
      white:   '#373b41'

    # Bright colors
    bright:
      black:   '#666666'
      red:     '#ff3334'
      green:   '#9ec400'
      yellow:  '#f0c674'
      blue:    '#81a2be'
      magenta: '#b77ee0'
      cyan:    '#54ced6'
      white:   '#282a2e'

######################################################################
## SET THEME: Choose ONE color scheme from those in the above list. ##
## ###################################################################
# Available themes are:
# *DoomOne
# *Dracula
# *GruvboxDark
# *MonokaiPro
# *Nord
# *OceanicNext
# *Palenight
# *SolarizedLight
# *SolarizedDark
# *TomorrowNight

colors: *MonokaiPro

#######################################
##       END OF COLOR SCHEMES        ##
#######################################

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
#visual_bell:
#  animation: EaseOutExpo
#  duration: 0
#  color: '#ffffff'


#selection:
  #semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  #save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
#dynamic_title: true

#cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - â–‡ Block
  #   - _ Underline
  #   - | Beam
  #style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

# Live config reload (changes require restart)
#live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
shell:
  program: /Users/saucon/.nix-profile/bin/fish
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false

  # Record all characters and escape sequences as test data.
  #ref_test: false

#mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  #hide_when_typing: false

  #url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    #launcher:
    #  program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
    # (Windows, Linux, and BSD only)
  - { key: V,         mods: Control|Shift, action: Paste                       }
  - { key: C,         mods: Control|Shift, action: Copy                        }
  - { key: Insert,    mods: Shift,         action: PasteSelection              }
  - { key: Key0,      mods: Control,       action: ResetFontSize               }
  - { key: Equals,    mods: Control,       action: IncreaseFontSize            }
  - { key: Plus,      mods: Control,       action: IncreaseFontSize            }
  - { key: Minus,     mods: Control,       action: DecreaseFontSize            }
  - { key: F11,       mods: None,          action: ToggleFullscreen            }
  - { key: Paste,     mods: None,          action: Paste                       }
  - { key: Copy,      mods: None,          action: Copy                        }
  - { key: L,         mods: Control,       action: ClearLogNotice              }
  - { key: L,         mods: Control,       chars: "\x0c"                       }
  - { key: PageUp,    mods: None,          action: ScrollPageUp,   mode: ~Alt  }
  - { key: PageDown,  mods: None,          action: ScrollPageDown, mode: ~Alt  }
  - { key: Home,      mods: Shift,         action: ScrollToTop,    mode: ~Alt  }
  - { key: End,       mods: Shift,         action: ScrollToBottom, mode: ~Alt  }
#+END_SRC

** bashrc

#+BEGIN_SRC conf :tangle .bashrc
#
# Generated from ~/dotfiles/system.org
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export HISTCONTROL=ignoreboth:erasedups

# PS1='\u@\h:\W\$ '
PS1='\[\e[31m\]\u\[\e[34m\]@\h:\[\e[32m\]\w$ \[\e[0m\]'

# PATH

if [ -d "$HOME/.bin" ] ;
  then PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ;
  then PATH="$HOME/.local/bin:$PATH"
fi

export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
export PATH="$HOME/google-cloud-sdk/bin:$PATH"

# export EDITOR="emacsclient -c"

# use vim as manpager
export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

# list (exa is a replacement for ls)
alias ls='exa --long --all --classify --color=always --group-directories-first'
alias lsd='exa --long --all --classify --color=always --only-dirs'

# fix obvious typos
alias cd..='cd ..'

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

#readable output
alias df='df --human-readable'

#pacman unlock
alias unlock="sudo rm /var/lib/pacman/db.lck"

#free
alias free="free -mt"

#use all cores
alias uac="sh ~/.bin/main/000*"

#continue download
alias wget="wget -c"

#userlist
alias userlist="cut -d: -f1 /etc/passwd"

#merge new settings
alias merge="xrdb -merge ~/.Xresources"

#ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

#calendar
alias cal="cal -y -m"

#Recent Installed Packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"
alias riplong="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -3000 | nl"

# # ex = EXtractor for all kinds of archives
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      ,*.tar.bz2)   tar xjf $1   ;;
      ,*.tar.gz)    tar xzf $1   ;;
      ,*.bz2)       bunzip2 $1   ;;
      ,*.rar)       unrar x $1   ;;
      ,*.gz)        gunzip $1    ;;
      ,*.tar)       tar xf $1    ;;
      ,*.tbz2)      tar xjf $1   ;;
      ,*.tgz)       tar xzf $1   ;;
      ,*.zip)       unzip $1     ;;
      ,*.Z)         uncompress $1;;
      ,*.7z)        7z x $1      ;;
      ,*.deb)       ar x $1      ;;
      ,*.tar.xz)    tar xf $1    ;;
      ,*.tar.zst)   unzstd $1    ;;
      ,*)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

#+END_SRC

** fish

The recommended way to config fish is to add separate functions to the ~/functions~
directory that will be autoloaded, but i prefer to configure everything in a single file,
so i'll just replace ~config.fish~

#+BEGIN_SRC sh :tangle .config/fish/config.fish

# Get most envvars from profile (requires oh-my-fish & fenv installed)
fenv source "$HOME/.profile"

# PATH
# ---------------------------------------------------------------------
fish_add_path --prepend "$HOME/bin"
fish_add_path --prepend "$HOME/.local/bin"
fish_add_path --prepend "$HOME/.emacs.d/bin"
fish_add_path --prepend "$HOME/.poetry/bin"
fish_add_path --prepend "/usr/bin/"
fish_add_path --prepend "/usr/local/bin"
fish_add_path --prepend "$HOME/scripts"
fish_add_path --prepend "$HOME/.nix-profile/bin"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '$HOME/google-cloud-sdk/path.fish.inc' ]; . '$HOME/google-cloud-sdk/path.fish.inc'; end
# ---------------------------------------------------------------------

# Environment Variables
# ---------------------------------------------------------------------
# Set vim as Manpager
set --export MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'
# ---------------------------------------------------------------------


# Aliases
# ---------------------------------------------------------------------
## List - using exa as a replacement for ls 
alias ls="lsd --long --group-dirs=first --date '+%Y-%m-%d %H:%M'"
alias lsa="lsd --long --group-dirs=first --almost-all --date '+%Y-%m-%d %H:%M'"
alias lst="lsd --long --group-dirs=first --tree --depth=2 --date '+%Y-%m-%d %H:%M'"
## I always miss the space
alias cd..="cd .."
## bat is better than cat
alias cat="bat"
## Colorize the grep command output 
alias grep='grep --color=auto'
## File system space info in readable format
alias df='df --human-readable'
## Memory info 
alias free="free -mt"
## Continue download
alias wget="wget -c"
## Userlist
alias userlist="cut -d: -f1 /etc/passwd"
## Calendar show full year
alias cal="cal -y -m"
## neovim
alias vim="nvim"
## yabai toggle
alias stopyabai="brew services stop yabai"
alias startyabai="brew services start yabai"
## docker/podman
alias docker="podman"
alias docker-compose="podman-compose"
# ---------------------------------------------------------------------


# Functions
# ---------------------------------------------------------------------

# Startup greeter
function fish_greeting
    # neofetch --ascii_distro Arcolinux_small --disable gpu de kernel packages
    # neofetch --disable gpu term de wm kernel packages model distro shell resolution cols --memory_percent on 
    neofetch --cpu_temp on  --disable gpu term de wm kernel packages model distro shell resolution cols cpu --memory_percent on --off
end

# Use vim as default key bindings
function fish_user_key_bindings
  fish_vi_key_bindings
end

# Function for creating a backup file
# ex: backup file.txt
# result: copies file as file.txt.bak
function backup --argument filename
    cp $filename $filename.bak
end

# Function to extract a variety of archives
# usage: extract <file>
function extract
  for arg in $argv
    if test -f $arg
      switch $arg
        case "*tar.bz2" "*.tbz2"
             tar xjf $arg
        case "*tar.gz" "*.tgz"
             tar xzf $arg
        case "*.bz2"
             bunzip2 $arg
        case "*rar"
             unrar x $arg
        case "*.gz"
             gunzip $arg
        case "*.tar"
             tar xf $arg
        case "*.zip"
             unzip $arg
        case "*.Z"
             uncompress $arg
        case "*7z"
             7z x $arg
        case "*.deb"
             ar x $arg
        case "*tar.xz"
             tar xz $arg
        case "*tar.zst"
             tar unzstd $arg
        case "*"
          set_color red
          echo "I don't know how to extract this type of archive: `$arg`"
          set_color normal
      end
    else
        set_color red
        echo "Not a valid file: `$arg`"
        set_color normal
    end
  end
end


function vterm_printf;
    if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end 
        # tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
    else if string match -q -- "screen*" "$TERM"
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$argv"
    else
        printf "\e]%s\e\\" "$argv"
    end
end

function vterm_prompt_end;
    vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
end

functions --copy fish_prompt vterm_old_fish_prompt

function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
    # Remove the trailing newline from the original prompt. This is done
    # using the string builtin from fish, but to make sure any escape codes
    # are correctly interpreted, use %b for printf.
    printf "%b" (string join "\n" (vterm_old_fish_prompt))
    vterm_prompt_end
end
# ---------------------------------------------------------------------


# Fish colors
# ---------------------------------------------------------------------
set fish_color_normal white
set fish_color_command blue
set fish_color_keyword yellow
set fish_color_quote green
set fish_color_error red
set fish_color_param purple
# fish_color_redirection
# fish_color_end
# fish_color_comment
set fish_color_selection black
# fish_color_operator
# fish_color_escape
set fish_color_autosuggestion "4c566a"
# fish_color_cwd
# fish_color_user
# fish_color_host
# fish_color_host_remote
# fish_color_cancel
# fish_color_search_match
# ---------------------------------------------------------------------

# pyenv setup
# set -Ux PYENV_ROOT $HOME/.pyenv
# fish_add_path $PYENV_ROOT/bin
# pyenv init - | source
# eval "$(pyenv virtualenv-init -)"

# direnv setup
direnv hook fish | source

# startship
starship init fish | source

#+END_SRC

*** Starship

To customize some icons

#+begin_src conf :tangle .config/starship.toml
    
# Inserts a blank line between shell prompts
add_newline = true

[character] 
success_symbol = "[âžœ](green)"
error_symbol = "[âžœ](red)"
vicmd_symbol = "[N](bold blue)"

[python]
symbol = "îœ¼ "

# Disable the package module, hiding it from the prompt completely
[package]
disabled = true
#+end_src

* Vim

** vimrc

#+BEGIN_SRC conf :tangle .vimrc
set number
set hlsearch
set incsearch
set wildmenu

set ttimeout
set ttimeoutlen=100

set laststatus=2
set splitbelow splitright

set tabstop=4
set shiftwidth=4

"packadd! dracula
syntax enable
"colorscheme dracula

filetype plugin indent on

let g:lightline = {
      \ 'colorscheme': 'nord',
      \ }

if has('mouse')
  set mouse=a
endif

" CUSTOM COMMANDS

:command W w
:command Wq wq
:command Q q

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

#+END_SRC

** ideavim.rc

** neovim

* git

** .gitconfig

#+begin_src conf :tangle .gitconfig
[user]
	name = sauco
	email = sauco.navarro@team.wrike.com

[fetch]
    prune = true

#+end_src


** ignore

#+begin_src conf :tangle .config/git/ignore
.venv
.DS_Store
*.pyc
.nox 
.idea
.vscode
.pytest_cache
.ruff_cache
.mypy_cache
__pycache__    
.direnv
#+end_src
