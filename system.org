#+TITLE: zima's configuration
#+AUTHOR: Sauco
#+DESCRIPTION: laptop's config
#+STARTUP: content

TOOD - create systemd unit to handle turning off SD card on autostart

* About

This is the configuration I use for a thinkpad t480s laptop.

It uses Archlinux with Qtile window manager.

Both pacman and guix are used, but I try to keep the things installed
with pacman to a minimum. 

This file is a literate config written in org-mode, use =org-babel-tangle= to
write the code blocks, and GNU Stow to symlink them into the home directory

#+BEGIN_SRC bash
stow .
#+END_SRC

Emacs configuration is in a separate [[emacs_config.org][]] file.

* Instructions

1. Install Archlinux
2. Install the base packages with pacman

#+begin_src bash

# This list might be different depending on what base install of arch is done
pacman -Syyu git fish alacritty starship lsd 

# Packaging
pacman -Syyu reflector
systemctl enable reflector.timer

# AUR helper
pacman -S base-devel
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si

# Clock synchronization
# To change timezones - timedatectl commands
pacman -Syyu ntp
systemctl enable ntpd.service

# Python deps (for my modules in qtile)
pacman -Syyu python-pip python-pipx python-keyring python-psutil python-requests

# Network
pacman -Syyu networkmanager network-manager-applet

# Firewall
pacman -Syyu ufw
systemctl start ufw.service
systemctl enable ufw.service
ufw default deny
ufw limit ssh
ufw allow from 192.168.0.0/24 to any port 80  # incoming http over lan
ufw allow from 192.168.0.0/24 to any port 442  # incoming https over lan
# to allow all on LAN
# ufw alllow from 192.168.0.0/24
# ufw allow Transmission  # torrent client

# Screens
pacman -Syyu arandr

# Libinput / Mouse / Trackpoint / Touchscreen...
pacman -Syyu xinput

# Battery
pacman -Syyu xfce4-power-manager

# Audio
pacman -Syyu pipewire pipewire-alsa pipewire-pulse pavucontrol

# Volume mounting
pacman -Syyu udiskie

# Bluetooth
pacman -Syyu bluez bluez-utils blueman
systemctl start bluetooth.service

# Printers / CUPS
pacman -Syyu cups cups-pdf system-config-printer
systemctl start cups.socket

# GPG 
pacman -Syyu ???

# Login Manager & Screenlock
pacman -Syyu lightdm light-locker lightdm-slick-greeter

# Appearance
pacman -Syyu lxappearance-gtk3 papirus-icon-theme arc-theme kvantum-qt5
yay -Syyu xcursor-breeze

# Fonts
pacman -Syyu font-manager ttf-jetbrains-mono-nerd ttf-ubuntu-mono-nerd

#+end_src
   
3. Install Guix

#+begin_src bash

#+end_src
   
#+begin_src scheme tangle: TODO/manifest.scm

;; GPG
pinentry

#+end_src

4. Other settings

#+begin_src bash

# TRIM SSDs
systemctl enable fstrim.timer

#+end_src

* .profile

#+begin_src bash :tangle .profile
# ************************************
# Generated from ~/dotfiles/system.org
# ************************************

# Guix profile
GUIX_PROFILE="$HOME/.guix-profile"
. "$GUIX_PROFILE/etc/profile"

# fish as default non-login shell
export SHELL=/usr/bin/fish

# Add a few places to $PATH
export PATH=$HOME/scripts:$PATH
#+end_src

* Guix
** channels.scm

Guix channel configuration

#+begin_src scheme :tangle .config/guix/channels.scm
;; ************************************
;; Generated from ~/dotfiles/system.org
;; ************************************

(list (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (branch "master")
       (introduction
        (make-channel-introduction
         "9edb3f66fd807b096b48283debdcddccfea34bad"
         (openpgp-fingerprint
          "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))

      (channel
       (name 'nonguix)
       (url "https://gitlab.com/nonguix/nonguix")
       (introduction
        (make-channel-introduction
         "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
         (openpgp-fingerprint
          "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
      
      (channel
       (name 'scn-channel)
       (url "https://github.com/saucoide/scn-channel")
       ;; (url "file:///home/saucoide/projects/scn-channel")
       (branch "main"))
      )

#+end_src

* Terminal
I am using alacritty as my terminal
** bashrc

#+BEGIN_SRC conf :tangle .bashrc
#
# Generated from ~/dotfiles/system.org
#

# PS1='\[\e[31m\]\u\[\e[34m\]@\h:\[\e[32m\]\w$ \[\e[0m\]'

# PATH

# if [ -d "$HOME/.bin" ] ;
#   then PATH="$HOME/.bin:$PATH"
# fi

# if [ -d "$HOME/.local/bin" ] ;
#   then PATH="$HOME/.local/bin:$PATH"
# fi

# export PATH=~/.local/bin:$PATH
# export PATH=~/.emacs.d/bin:$PATH
# export PATH=~/.poetry/bin:$PATH

# export EDITOR=vim

# use vim as manpager
# export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

# #readable output
# alias df='df --human-readable'

# #pacman unlock
# alias unlock="sudo rm /var/lib/pacman/db.lck"

# #free
# alias free="free -mt"

# #use all cores
# alias uac="sh ~/.bin/main/000*"

# #continue download
# alias wget="wget -c"

# #userlist
# alias userlist="cut -d: -f1 /etc/passwd"

# #merge new settings
# alias merge="xrdb -merge ~/.Xresources"

# # Aliases for software managment
# # pacman or pm
# alias pacman='sudo pacman --color auto'
# alias update='sudo pacman -Syyu'

# # yay as aur helper - updates everything
# alias upall="yay -Syu"

# #ps
# alias psa="ps auxf"
# alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

# #grub update
# alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

# #add new fonts
# alias update-fc='sudo fc-cache -fv'

# #copy/paste all content of /etc/skel over to home folder - backup of config created - beware
# alias skel='cp -Rf ~/.config ~/.config-backup-$(date +%Y.%m.%d-%H.%M.%S) && cp -rf /etc/skel/* ~'
# #backup contents of /etc/skel to hidden backup folder in home/user
# alias bupskel='cp -Rf /etc/skel ~/.skel-backup-$(date +%Y.%m.%d-%H.%M.%S)'

# #switch between bash and zsh
# alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
# alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"

# #hardware info --short
# alias hw="hwinfo --short"

# #get fastest mirrors in your neighborhood
# alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
# alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
# alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
# alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# #mounting the folder Public for exchange between host and guest on virtualbox
# alias vbm="sudo mount -t vboxsf -o rw,uid=1000,gid=1000 Public /home/$USER/Public"

# #calendar
# alias cal="cal -y -m"

# #youtube-dl
# alias yta-best="youtube-dl --extract-audio --audio-format best "
# alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
# alias yta-wav="youtube-dl --extract-audio --audio-format wav "
# alias ytv-best="youtube-dl -f bestvideo+bestaudio "

# #Recent Installed Packages
# alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"
# alias riplong="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -3000 | nl"

# #Cleanup orphaned packages
# alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'

# #get the error messages from journalctl
# alias jctl="journalctl -p 3 -xb"

# #emacs for important configuration files
# #know what you do in these files
# alias elightdm="sudo emacs /etc/lightdm/lightdm.conf"
# alias epacman="sudo emacs /etc/pacman.conf"
# alias egrub="sudo emacs /etc/default/grub"
# alias eoblogout="sudo emacs /etc/oblogout.conf"
# alias bls="betterlockscreen -u /usr/share/backgrounds/arcolinux/"

#+END_SRC

** fish

The recommended way to config fish is to add separate functions to the ~/functions~
directory that will be autoloaded, but i prefer to configure everything in a single file,
so i'll just replace ~config.fish~

#+BEGIN_SRC sh :tangle .config/fish/config.fish


# PATH
# ---------------------------------------------------------------------
# fish_add_path --prepend "~/.bin"
# fish_add_path --prepend "~/.local/bin"
# fish_add_path --prepend "~/.emacs.d/bin"
# fish_add_path --prepend "~/.poetry/bin"
# fish_add_path --prepend "~/.local/share/coursier/bin"
# # ---------------------------------------------------------------------

# # Environment Variables
# # ---------------------------------------------------------------------
# set VISUAL "emacsclient -c -a ''"
# set EDITOR "emacsclient -t -a ''"
# set SSH_ENV "$HOME/.ssh/agent-environment"

# # Aliases
# # ---------------------------------------------------------------------
# ## List - using exa as a replacement for ls 
alias ls="lsd --long --color=always --group-dirs=first --date '+%Y-%m-%d %H:%M'"
alias lsa="lsd --long --almost-all --group-dirs=first --date '+%Y-%m-%d %H:%M'"
alias lst="lsd --long --tree --depth=2 --color=always --date '+%Y-%m-%d %H:%M'"
# ## pbcopy pbpaste alias
# alias pbcopy="xclip -selection clipboard"
# alias pbpaste="xclip -selection clipboard -o"
# ## a better cat
alias cat="bat"
# ## I always miss the space
alias cd..="cd .."
# ## Colorize the grep command output 
alias grep='grep --color=auto'
# ## File system space info in readable format
alias df='df --human-readable'
# ## Memory info 
alias free="free -mt"
# ## Continue download
alias wget="wget -c"
# ## Userlist
alias userlist="cut -d: -f1 /etc/passwd"
# ## Aliases for software managment
# ### Pacman
# alias pacman='sudo pacman --color auto'
# alias update='sudo pacman -Syyu'
# ### Cleanup orphaned packages
# alias cleanup='sudo pacman -Rns (pacman -Qtdq)'
# ### Yay as aur helper - updates everything
# alias yayupdate="yay -Syu"
# ### Mirror updates
alias mirrors="sudo reflector --latest 50 --sort rate --save /etc/pacman.d/mirrorlist"
# ## Calendar show full year
# alias cal="cal -y -m"
# # ---------------------------------------------------------------------

# # Functions
# # ---------------------------------------------------------------------

# # Startup greeter
# function fish_greeting
#     ""
# end

# # Use vim as default key bindings
function fish_user_key_bindings
  fish_vi_key_bindings
end

# # Function for creating a backup file
# # ex: backup file.txt
# # result: copies file as file.txt.bak
# function backup --argument filename
#     cp $filename $filename.bak
# end

# # Function to extract a variety of archives
# # usage: extract <file>
function extract
  for arg in $argv
    if test -f $arg
      switch $arg
        case "*tar.bz2" "*.tbz2"
             tar xjf $arg
        case "*tar.gz" "*.tgz"
             tar xzf $arg
        case "*.bz2"
             bunzip2 $arg
        case "*rar"
             unrar x $arg
        case "*.gz"
             gunzip $arg
        case "*.tar"
             tar xf $arg
        case "*.zip"
             unzip $arg
        case "*.Z"
             uncompress $arg
        case "*7z"
             7z x $arg
        case "*.deb"
             ar x $arg
        case "*tar.xz"
             tar xz $arg
        case "*tar.zst"
             tar unzstd $arg
        case "*"
          set_color red
          echo "I don't know how to extract this type of archive: `$arg`"
          set_color normal
      end
    else
        set_color red
        echo "Not a valid file: `$arg`"
        set_color normal
    end
  end
end

function pesel
  pass pesel | pbcopy
end

function weather
  ~/.config/fish/scripts/weather.sh
end

function webcam
  ~/.config/fish/scripts/webcam.sh
end
# # ---------------------------------------------------------------------


# # Fish colors
# # ---------------------------------------------------------------------
set fish_color_normal white
set fish_color_command blue
set fish_color_keyword yellow
set fish_color_quote green
set fish_color_error red
set fish_color_param purple
# # fish_color_redirection
# # fish_color_end
# # fish_color_comment
set fish_color_selection black
# # fish_color_operator
# # fish_color_escape
set fish_color_autosuggestion "4c566a"
# # fish_color_cwd
# # fish_color_user
# # fish_color_host
# # fish_color_host_remote
# # fish_color_cancel
# # fish_color_search_match
# # ---------------------------------------------------------------------


# # PATH
# # TODO fix this
# # function start_agent {
# #     echo "Initialising new SSH agent..."
# #     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
# #     echo succeeded
# #     chmod 600 "${SSH_ENV}"
# #     . "${SSH_ENV}" > /dev/null
# #     /usr/bin/ssh-add;
# # }

# # # Source SSH settings, if applicable

# # if [ -f "${SSH_ENV}" ]; then
# #     . "${SSH_ENV}" > /dev/null
# #     #ps ${SSH_AGENT_PID} doesn't work under cywgin
# #     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
# #         start_agent;
# #     }
# # else
# #     start_agent;
# # fi

# PROMPT (starship https://github.com/starship/starship)
starship init fish | source

#+END_SRC

** starship

To customize some icons

#+begin_src conf :tangle .config/starship.toml
    
# Inserts a blank line between shell prompts
add_newline = true

[character] 
success_symbol = "[➜](green)"
error_symbol = "[➜](red)"
vicmd_symbol = "[N](bold blue)"

[python]
symbol = " "

# Disable the package module, hiding it from the prompt completely
[package]
disabled = true
#+end_src

** alacritty

TODO: config alacritty theme

* Lightdm

This file does not get tangled as it's not the user's =~/.config=
copy manually to =/etc/lightdm/lightdm-gtk-greeter.conf=

#+begin_src conf

# LightDM GTK+ Configuration
# Available configuration options listed below.
#
# Appearance:
#  theme-name = GTK+ theme to use
#  icon-theme-name = Icon theme to use
#  cursor-theme-name = Cursor theme to use
#  cursor-theme-size = Cursor size to use
#  background = Background file to use, either an image path or a color (e.g. #772953)
#  user-background = false|true ("true" by default)  Display user background (if available)
#  transition-duration = Length of time (in milliseconds) to transition between background images ("500" by default)
#  transition-type = ease-in-out|linear|none  ("ease-in-out" by default)
#
# Fonts:
#  font-name = Font to use
#  xft-antialias = false|true  Whether to antialias Xft fonts
#  xft-dpi = Resolution for Xft in dots per inch (e.g. 96)
#  xft-hintstyle = none|slight|medium|hintfull  What degree of hinting to use
#  xft-rgba = none|rgb|bgr|vrgb|vbgr  Type of subpixel antialiasing
#
# Login window:
#  active-monitor = Monitor to display greeter window (name or number). Use #cursor value to display greeter at monitor with cursor. Can be a semicolon separated list
#  position = x y ("50% 50%" by default)  Login window position
#  default-user-image = Image used as default user icon, path or #icon-name
#  hide-user-image = false|true ("false" by default)
#
# Panel:
#  panel-position = top|bottom ("top" by default)
#  clock-format = strftime-format string, e.g. %H:%M
#  indicators = semi-colon ";" separated list of allowed indicator modules. Built-in indicators include "~a11y", "~language", "~session", "~power", "~clock", "~host", "~spacer". Unity indicators can be represented by short name (e.g. "sound", "power"), service file name, or absolute path
#
# Accessibility:
#  a11y-states = states of accessibility features: "name" - save state on exit, "-name" - disabled at start (default value for unlisted), "+name" - enabled at start. Allowed names: contrast, font, keyboard, reader.
#  keyboard = command to launch on-screen keyboard (e.g. "onboard")
#  keyboard-position = x y[;width height] ("50%,center -0;50% 25%" by default)  Works only for "onboard"
#  reader = command to launch screen reader (e.g. "orca")
#  at-spi-enabled = false|true ("true" by default) Enables accessibility at-spi-command if the greeter is built with it enabled
#
# Security:
#  allow-debugging = false|true ("false" by default)
#  screensaver-timeout = Timeout (in seconds) until the screen blanks when the greeter is called as lockscreen
#
# Template for per-monitor configuration:
#  [monitor: name]
#  background = overrides default value
#  user-background = overrides default value
#  laptop = false|true ("false" by default) Marks monitor as laptop display
#  transition-duration = overrides default value
#
[greeter]
background=/usr/share/backgrounds/nord_arch.png
#user-background=
theme-name=Arc-Dark-solid
icon-theme-name=Papirus-Dark
font-name=Cantarell
#xft-antialias=
#xft-dpi=
#xft-hintstyle=
#xft-rgba=
#indicators=
#clock-format=
#keyboard=
#reader=
position=10%,start 50%,center
screensaver-timeout=3600

#+end_src

* Rofi
I use a custom rofi theme with nord colors
** config

#+BEGIN_SRC conf :tangle .config/rofi/config.rasi
/* Generated from ~/dotfiles/system.org */
configuration {
  modi: "filebrowser,window,drun,run,ssh";
  show-icons : true;
  display-filebrowser : "true";
  timeout {
      action: "kb-cancel";
      delay:  0;
  }
  filebrowser {
      directories-first: true;
      sorting-method:    "name";
  }
}
    
@theme "themes/simple_nord"
#+END_SRC

** simple_nord.rasi (theme)

Custom theme with nord colors

#+BEGIN_SRC conf :tangle .config/rofi/themes/simple_nord.rasi
/**
 * ROFI Nord Color theme
 * User: saucoide
 **/
 * {
    theme-color:                 #81A1C1;
    dark-blue:                   #5E81AC;
    red:                         #BF616A;
    blue:                        #88C0D0;
    purple:                      #B48EAD;
    foreground:                  #D8DEE9;
    background:                  #2E3440;
    lightbg:                     #3B4252;
    lightfg:                     #D8DEE9;

    background-color:            rgba ( 0, 0, 0, 0 % );
    separatorcolor:              @theme-color;
    border-color:                @lightbg;

    normal-background:           @background;
    normal-foreground:           @foreground;
    alternate-normal-background: @background;
    alternate-normal-foreground: @foreground;
    selected-normal-foreground:  @lightfg;
    selected-normal-background:  @dark-blue;

    active-background:           @background;
    active-foreground:           @purple;
    alternate-active-background: @lightbg;
    alternate-active-foreground: @blue;
    selected-active-background:  @blue;
    selected-active-foreground:  @background;

    urgent-background:           @background;
    urgent-foreground:           @red;
    alternate-urgent-foreground: @red;
    alternate-urgent-background: @lightbg;
    selected-urgent-background:  @red;
    selected-urgent-foreground:  @background;

    spacing:                     2;
}
element {
    padding: 3px ;
    spacing: 5px ;
    border:  0;
}
element normal.normal {
    background-color: var(normal-background);
    text-color:       var(normal-foreground);
}
element normal.urgent {
    background-color: var(urgent-background);
    text-color:       var(urgent-foreground);
}
element normal.active {
    background-color: var(active-background);
    text-color:       var(active-foreground);
}
element selected.normal {
    background-color: var(selected-normal-background);
    text-color:       var(selected-normal-foreground);
}
element selected.urgent {
    background-color: var(selected-urgent-background);
    text-color:       var(selected-urgent-foreground);
}
element selected.active {
    background-color: var(selected-active-background);
    text-color:       var(selected-active-foreground);
}
element alternate.normal {
    background-color: var(alternate-normal-background);
    text-color:       var(alternate-normal-foreground);
}
element alternate.urgent {
    background-color: var(alternate-urgent-background);
    text-color:       var(alternate-urgent-foreground);
}
element alternate.active {
    background-color: var(alternate-active-background);
    text-color:       var(alternate-active-foreground);
}
element-text {
    background-color: rgba ( 0, 0, 0, 0 % );
    text-color:       inherit;
}
element-icon {
    background-color: rgba ( 0, 0, 0, 0 % );
    size:             1.2000ch ;
    text-color:       inherit;
}
window {
    padding:          5 1 5 5;
    background-color: var(background);
    border:           1;
}
mainbox {
    padding: 0;
    border:  0;
}
message {
    padding:      1px ;
    border-color: var(separatorcolor);
    border:       2px dash 0px 0px ;
}
textbox {
    text-color: var(foreground);
}
listview {
    padding:      2px 0px 0px ;
    scrollbar:    true;
    border-color: var(separatorcolor);
    spacing:      2px ;
    fixed-height: 0;
    border:       2px dash 0px 0px ;
}
scrollbar {
    width:        10px ;
    padding:      0;
    handle-width: 10px ;
    border:       0;
    handle-color: #4C566A;
}
sidebar {
    border-color: var(separatorcolor);
    border:       2px dash 0px 0px ;
}
button {
    spacing:    0;
    text-color: var(normal-foreground);
}
button selected {
    background-color: var(selected-normal-background);
    text-color:       var(selected-normal-foreground);
}

num-filtered-rows, num-rows {
    text-color: grey;
    expand: false;
}
textbox-num-sep {
    text-color: grey;
    expand: false;
    str: "/";
}
inputbar {
    padding:    1px ;
    spacing:    0px ;
    text-color: var(normal-foreground);
    children:   [ prompt,textbox-prompt-colon,entry, num-filtered-rows, textbox-num-sep, num-rows, case-indicator ];
}
case-indicator {
    spacing:    0;
    text-color: var(normal-foreground);
}
entry {
    spacing:    0;
    text-color: @red;
    placeholder-color: grey;
    placeholder: "Type to filter";
}
prompt {
    spacing:    0;
    text-color: @blue;
}
textbox-prompt-colon {
    margin:     0px 0.3000em 0.0000em 0.0000em ;
    expand:     false;
    str:        ":";
    text-color: inherit;
}

 #+END_SRC

* Dunst

I use dunst for simple notifications

** dunstrc

#+BEGIN_SRC conf :tangle .config/dunst/dunstrc
# Generated from ~/dotfiles/system.org
[global]
    ### Display ###

    # Which monitor should the notifications be displayed on.
    monitor = 0

    # Display notification on focused monitor.  Possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a window manager that exports the
    # _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern window managers.
    #
    # If this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = mouse

    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    # The geometry of the message window.
    # The height is measured in number of notifications everything else
    # in pixels.  If the width is omitted but the height is given
    # ("-geometry x2"), the message window expands over the whole screen
    # (dmenu-like).  If width is 0, the window expands to the longest
    # message displayed.  A positive x is measured from the left, a
    # negative from the right side of the screen.  Y is measured from
    # the top and down respectively.
    # The width can be negative.  In this case the actual width is the
    # screen width minus the width defined in within the geometry option.
    geometry = "300x5-10+30"

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = no

    # The transparency of the window.  Range: [0; 100].
    # This option will only work if a compositing window manager is
    # present (e.g. xcompmgr, compiz, etc.).
    transparency = 0.8

    # The height of the entire notification.  If the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 2

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 8

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 1

    # Defines color of the frame around the notification window.
    frame_color = "#5e81ac"

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = frame

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    # A client can set the 'transient' hint to bypass this. See the rules
    # section for how to disable this if necessary
    idle_threshold = 120

    ### Text ###

    font = Monospace 8

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0

    # Possible values are:
    # full: Allow a small subset of html markup in notifications:
    #        <b>bold</b>
    #        <i>italic</i>
    #        <s>strikethrough</s>
    #        <u>underline</u>
    #
    #        For a complete reference see
    #        <https://developer.gnome.org/pango/stable/pango-Markup.html>.
    #
    # strip: This setting is provided for compatibility with some broken
    #        clients that send markup even though it's not enabled on the
    #        server. Dunst will try to strip the markup but the parsing is
    #        simplistic so using this option outside of matching rules for
    #        specific applications *IS GREATLY DISCOURAGED*.
    #
    # no:    Disable markup parsing, incoming notifications will be treated as
    #        plain text. Dunst will not advertise that it has the body-markup
    #        capability if this is set as a global setting.
    #
    # It's important to note that markup inside the format option will be parsed
    # regardless of what this is set to.
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Vertical alignment of message text and icon.
    # Possible values are "top", "center" and "bottom".
    vertical_alignment = center

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # When word_wrap is set to no, specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Align icons left/right/off
    icon_position = left

    # Scale small icons up to this size, set to 0 to disable. Helpful
    # for e.g. small files or high-dpi screens. In case of conflict,
    # max_icon_size takes precedence over this.
    min_icon_size = 0

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 32

    # Paths to default icons.
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # dmenu path.
    dmenu = /usr/bin/dmenu -p dunst:

    # Browser for opening urls in context menu.
    browser = /usr/bin/firefox -new-tab

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    # Print a notification on startup.
    # This is mainly for error detection, since dbus (re-)starts dunst
    # automatically after a crash.
    startup_notification = false

    # Manage dunst's desire for talking
    # Can be one of the following values:
    #  crit: Critical features. Dunst aborts
    #  warn: Only non-fatal warnings
    #  mesg: Important Messages
    #  info: all unimportant stuff
    # debug: all less than unimportant stuff
    verbosity = mesg

    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 0

    ### Legacy

    # Use the Xinerama extension instead of RandR for multi-monitor support.
    # This setting is provided for compatibility with older nVidia drivers that
    # do not support RandR and using it on systems that support RandR is highly
    # discouraged.
    #
    # By enabling this setting dunst will not be able to detect when a monitor
    # is connected or disconnected which might break follow mode if the screen
    # layout changes.
    force_xinerama = false

    ### mouse

    # Defines list of actions for each mouse event
    # Possible values are:
    # * none: Don't do anything.
    # * do_action: If the notification has exactly one action, or one is marked as default,
    #              invoke it. If there are multiple and no default, open the context menu.
    # * close_current: Close current notification.
    # * close_all: Close all notifications.
    # These values can be strung together for each mouse event, and
    # will be executed in sequence.
    mouse_left_click = close_current
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

[shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    close = ctrl+space

    # Close all notifications.
    close_all = ctrl+shift+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1". Make sure this key actually exists on your keyboard layout,
    # e.g. check output of 'xmodmap -pke'
    history = ctrl+grave

    # Context menu.
    context = ctrl+shift+period

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#2e3440"
    foreground = "#888888"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_normal]
    background = "#2e3440"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_critical]
    background = "#2e3440"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
#
# Messages can be matched by
#    appname (discouraged, see desktop_entry)
#    body
#    category
#    desktop_entry
#    icon
#    match_transient
#    msg_urgency
#    stack_tag
#    summary
#
# and you can override the
#    background
#    foreground
#    format
#    frame_color
#    fullscreen
#    new_icon
#    set_stack_tag
#    set_transient
#    timeout
#    urgency
#
# Shell-like globbing will get expanded.
#
# Instead of the appname filter, it's recommended to use the desktop_entry filter.
# GLib based applications export their desktop-entry name. In comparison to the appname,
# the desktop-entry won't get localized.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format
# to "".
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

# Disable the transient hint so that idle_threshold cannot be bypassed from the
# client
#[transient_disable]
#    match_transient = yes
#    set_transient = no
#
# Make the handling of transient notifications more strict by making them not
# be placed in history.
#[transient_history_ignore]
#    match_transient = yes
#    history_ignore = yes

# fullscreen values
# show: show the notifications, regardless if there is a fullscreen window opened
# delay: displays the new notification, if there is no fullscreen window active
#        If the notification is already drawn, it won't get undrawn.
# pushback: same as delay, but when switching into fullscreen, the notification will get
#           withdrawn from screen again and will get delayed like a new notification
#[fullscreen_delay_everything]
#    fullscreen = delay
#[fullscreen_show_critical]
#    msg_urgency = critical
#    fullscreen = show

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[skip-display]
#    # This notification will not be displayed, but will be included in the history
#    summary = "foobar"
#    skip_display = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[stack-volumes]
#    appname = "some_volume_notifiers"
#    set_stack_tag = "volume"
#
# vim: ft=cfg

#+END_SRC

* Neovim

TODO: add basic config

* Qtile

My window manager is Qtile, the configuration is lenghty

** autostart.sh

Remember to `chmod +x` this file so it can be executed
#+BEGIN_SRC bash :tangle .config/qtile/autostart.sh :tangle-mode (identity #o755)
#!/bin/bash

# Generated from ~/dotfiles/system.org

function run {
  if ! pgrep $1 ;
  then
    $@&
  fi
}

# setxkbmap -option "ctrl:nocaps"
run dunst &
run nm-applet &
run udiskie &
run xfce4-power-manager &
run blueman-applet &
run light-locker &

# Using xinput to set input settings
# xinput list # list devices
# xinput list-props {device} # list devices
# xinput set-prop {device} {property} {value}
# Touchpad settings
xinput -set-prop "Elan Touchpad" "libinput Tapping Enabled" 1

# Trackpoint settings
xinput set-prop "Elan TrackPoint" "libinput Accel Speed" -0.4


#+END_SRC

** config.py

#+begin_src python :tangle .config/qtile/config.py
# -*- coding: utf-8 -*-
#
# Generated from ~/dotfiles/system.org
# Author: saucoide
# configuration file for a customized  Qtile window manager (http://www.qtile.org)
# based on a version by Derek Taylor  (http://www.gitlab.com/dwt1/ )
#
# The following comments are the copyright and licensing information from the default
# qtile config. Copyright (c) 2010 Aldo Cortesi, 2010, 2014 dequis, 2012 Randall Ma,
# 2012-2014 Tycho Andersen, 2012 Craig Barnes, 2013 horsik, 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be includ ed in all copies
# or substantial portions of the Software.
import os
import pathlib
import random
import socket
import subprocess

from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

from mailwatcher import main_wrapper as mailwatcher
from inoreader import main_wrapper as inoreader


# Main Modifier
mod = "mod4"

# Programs & Constants'
TERMINAL = guess_terminal()
TEXT_EDITOR = "emacsclient --create-frame --alternate-editor ''"
EMAIL_CLIENT = "emacs"
FILE_MANAGER = "thunar"
BROWSER = "firefox"
SYS_MONITOR = "xfce4-taskmanager"

MY_CONFIG = "~/.config/qtile/config.py"

# Prompt format
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())

# Colors
COLORS = {
    "white":"ffffff",
    "background_0":"#2e3440",           # backgrounds 0 darkest - 3 lighest
    "background_1":"#3B4252",           
    "background_2":"#434c5e",          
    "background_3":"#4c566a",          
    "group_highlight":"#ff5555",      # border line color for current group
    "border_line":"#8d62a9",          # border line color for other tab and odd widgets
    "border_focus":"#5e81ac",
    "win_name":"#81a1c1",             # current window name
    "frost0":"#5e81ac",               # Theme colors (nord)
    "frost1":"#81a1c1",
    "frost2":"#434C5E",
    "frost3":"#4C566A",
    "nord_white": "#c7cdd8",
    "nord_red":"#bf616a",
    "lime": "#50fa7b",
}

# Custom Functions
@lazy.function
def float_to_front():
    for group in qtile.groups:
        for window in group.windows:
            if window.floating:
                window.cmd_bring_to_front()
                
def get_wallpaper():
    wp_path = pathlib.Path.home() / ".config/qtile/wallpapers"
    wallpapers = list(filter(lambda x: x.suffix in (".png",".jpg"), wp_path.glob("*")))
    return random.choice(wallpapers)

def launch_rofi():
    lazy.spawn_cmd('rofi -show drun')

# Key bindings
keys = [
    
    # Basics
    Key([mod], "y", lazy.spawncmd(), desc='launch prompt'),
    Key([mod], "k", lazy.window.kill(), desc='Kill active window'),
    Key([mod], "q", lazy.window.kill(), desc='Kill active window'),
    Key([mod, "shift"], "r", lazy.restart(), desc='Restart Qtile'),
    Key([mod, "shift"], "q", lazy.shutdown(), desc='Shutdown Qtile'),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    #Key([mod], "x", lazy.spawn('arcolinux-logout')),

    # Window Control

    ## Focus
    Key([mod], "Down", lazy.layout.down(), desc = "Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc = "Move focus up"),
    Key([mod], "Right", lazy.layout.left(), desc = "Move focus to right"),
    Key([mod], "Left", lazy.layout.right(),desc="Move focus to left"),
    # Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    # Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    # Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    # Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),

    ## Toggle Fullscreen
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc = "Toggle fullscreen for the current window"),
    
    ## Move
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc = "Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc = "Move window up"),
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc = "Move window left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc = "Move window right"),
    # Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    # Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    # Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    # Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    ## Resize
    Key([mod], "n",
        lazy.layout.normalize(),
        desc="Reset all window sizes"),
    Key([mod, "control"], "Down",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        desc = "Increase size down"),
    Key([mod, "control"], "Up",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        desc = "Increase size up"),
    Key([mod, "control"], "Left",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        desc = "Increase size left"),
    Key([mod, "control"], "Right",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        desc = "Increase size right"),
    # Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    # Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    # Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    # Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),

    # Layout Control
    
    ## Switching layouts
    Key([mod], "Tab", lazy.next_layout(), desc='Toggle through layouts'),
    Key([mod], "c", lazy.to_layout_index(0), desc='switch to COLUMNS layout'),
    Key([mod], "t", lazy.to_layout_index(0), desc='switch to COLUMNS layout'),
    Key([mod], "m", lazy.to_layout_index(1), desc='switch to MAX layout'),

    ## Layout specific
    Key([mod], "Return", lazy.layout.toggle_split(),lazy.layout.flip(),
        desc = "Switch between Stack/Tile modes"),
    
    ## Float
    Key([mod, "shift"], "f", lazy.window.toggle_floating(), desc='toggle floating'),
    Key([mod, "control"], "f", float_to_front, desc='Surface all floating windows'),

    # Application Launching

    ## Super + Key
    Key([mod], "space", lazy.spawn('rofi -show drun'), desc='Launch rofi drun'),
    Key([mod], "e", lazy.spawn(FILE_MANAGER), desc='Launch file manager'),
    Key([mod], "Escape", lazy.spawn('xkill'), desc = 'Click to kill window'),

    ## (CONTROL + ALT + KEY) // alt+super+key?
    Key(["control", "mod1"], "t", lazy.spawn(TERMINAL), desc='terminal'),
    Key(["control", "mod1"], "f", lazy.spawn(f"{BROWSER}"), desc='Launch browser'),
    Key(["control", "mod1"], "n", lazy.spawn(TEXT_EDITOR), desc='Launch text editor'),

    ## Screenshots
    Key([], "Print", lazy.spawn('flameshot gui'), desc='Take a Screenshot'),
    Key([mod], "Print", lazy.spawn('flameshot launcher'), desc='Screenshot Menu'),

    ## Volume & Media keys
    # TODO:
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    Key([], "XF86AudioMute", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
    Key([], "XF86AudioMicMute", lazy.spawn("pactl set-source-mute @DEFAULT_SOURCE@ toggle")),

    # Key([], "XF86AudioPlay", lazy.spawn("playerctl play-pause")),
    # Key([], "XF86AudioNext", lazy.spawn("playerctl next")),
    # Key([], "XF86AudioPrev", lazy.spawn("playerctl previous")),
    # Key([], "XF86AudioStop", lazy.spawn("playerctl stop")),
]

# Mouse
follow_mouse_focus = False
dgroups_key_binder = None
dgroups_app_rules = []  # type: list
bring_front_click = False
cursor_warp = False
## Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

# floating_types = ["notification", "toolbar", "splash", "dialog"]

# @hook.subscribe.client_new
# def set_floating(window):
#     if (window.window.get_wm_transient_for()
#             or window.window.get_wm_type() in floating_types):
#         window.floating = True

floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        ,*layout.Floating.default_float_rules,
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(wm_class="pinentry"),
        Match(wm_class='confirm'),
        Match(wm_class='dialog'),
        Match(wm_class='download'),
        Match(wm_class='error'),
        Match(wm_class='file_progress'),
        Match(wm_class='notification'),
        Match(wm_class='splash'),
        Match(wm_class='toolbar'),
        Match(wm_class='Arandr'),
        Match(wm_class='arcolinux-logout'),
        Match(title='Open File'),
    ],
    border_width=1,
    border_focus="#bf616a", # TODO: change color
)

# Groups
groups = [Group(i, layout="columns") for i in "123456789"]

## Keybindings

### Goto last group
keys.append(Key([mod], "BackSpace", lazy.screen.toggle_group()))

### Number keys for each group
for number, group in enumerate(groups, start=1):
    #Mod+Num = Switch group/view
    #Mod+Shift+Num = Send window to group & switch to it
    #Mod+Control+Num = Send window to group
    keys.append(Key([mod], str(number), lazy.group[group.name].toscreen()))
    keys.append(Key([mod, "shift"], str(number), lazy.window.togroup(group.name, switch_group=True)))
    keys.append(Key([mod, "control"], str(number), lazy.window.togroup(group.name, switch_group=False)))

# Layouts
layouts = [
    layout.Columns(
        margin=2,
        border_width= 2,
        border_normal=COLORS["background_0"],
        border_focus=COLORS["lime"],
        border_focus_stack=COLORS["nord_red"]),
    layout.Max(
        margin=0,
        border_width=1,
        border_focus=COLORS["frost3"],
        ),
]

# Screens & Widgets
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

widget_defaults = dict(
    font="Ubuntu Mono",
    fontsize = 12,
    padding = 2,
    background=COLORS["background_0"]
)
extension_defaults = widget_defaults.copy()   # ???

#TODO CHANGE ALL THIS 
screens = [
    Screen(
        top=bar.Bar(
            [
                widget.Image(
                    filename = "~/.config/qtile/icons/arcolinux.png",
                    margin = 3,
                    mouse_callbacks = {'Button1': lazy.spawn("rofi -show drun")}
                ),
                widget.GroupBox(
                    font="UbuntuMono Nerd Font",
                    fontsize=18,
                    margin_x=5,
                    padding_x=5,
                    borderwidth=3,
                    block_highlight_text_color=COLORS["white"],
                    active=COLORS["nord_white"],
                    inactive=COLORS["background_2"],
                    highlight_color=COLORS["background_1"],
                    highlight_method="line",
                    this_current_screen_border=COLORS["nord_red"],
                    this_screen_border=COLORS["nord_red"],
                    rounded=False,
                    disable_dag=True,
                ),
                widget.CurrentLayoutIcon(
                    custom_icon_paths=[os.path.expanduser("~/.config/qtile/icons")],
                    background = COLORS["background_0"],
                    padding = 0,
                    scale=0.6
                ),
                widget.Prompt(),
                widget.WindowTabs(
                    foreground=COLORS["nord_white"],
                ),
                widget.GenPollText(
                    func=mailwatcher,
                    update_interval=600,
                    fmt="󰇮 {} |",
                ),
                widget.GenPollText(
                    func=inoreader,
                    update_interval=600,
                    fmt=" {} |",
                ),
                widget.CPU(
                    format="CPU {freq_current}GHz {load_percent}% |",
                    update_interval=5,
                ),
                widget.ThermalSensor(
                    format="{temp:.0f}{unit} |",
                    update_interval=5,
                ),
                widget.PulseVolume(
                    fmt=" {} |",
                    update_interval=1,
                ), 
                widget.Systray(),
                widget.Clock(format="%Y-%m-%d %H:%M |"),  # TODO: open a calendar, maybe weather?
                widget.TextBox(
                    fmt="󰐥 ",
                    mouse_callbacks = {'Button1': lazy.spawn("rofi -show drun")}
                ),
            ],
            24,
        ),
        wallpaper = get_wallpaper(),
        wallpaper_mode = 'fill',
    ),
]

# Startup Applications
@hook.subscribe.startup_once
def autostart():
    autostart_script = pathlib.Path.home() / ".config/qtile/autostart.sh"
    subprocess.call([autostart_script])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

** inoreader.py

One fo the bar widgets in my qtile config displays the number of unread RSS readers on my inoreader account, which is the result of this python script

To get the password from kwallet it is using =keyring= so that dependency needs to be installed

#+BEGIN_SRC python :tangle .config/qtile/inoreader.py
# Generated from ~/dotfiles/system.org

import requests
import subprocess
import pathlib
import logging


LOGFILE = pathlib.Path().home() / ".local/share/qtile/inoreader.log"
logger = logging.getLogger(__name__)
handler = logging.FileHandler(LOGFILE)
logger.addHandler(handler)

def main():

    BASE_URL = "https://www.inoreader.com/reader/api/0"
    LOGIN_URL = "https://www.inoreader.com/accounts/ClientLogin"

    username = subprocess.run(
        ["pass", "inoreader_user"],
        check=True,
        capture_output=True,
        encoding="utf-8",
    ).stdout.strip()
    password = subprocess.run(
        ["pass", "inoreader_password"],
        check=True,
        capture_output=True,
        encoding="utf-8",
    ).stdout.strip()
    app_id = subprocess.run(
        ["pass", "inoreader_appid"],
        check=True,
        capture_output=True,
        encoding="utf-8",
    ).stdout.strip()
    app_key = subprocess.run(
        ["pass", "inoreader_appkey"],
        check=True,
        capture_output=True,
        encoding="utf-8",
    ).stdout.strip()
    
    resp = requests.post(LOGIN_URL,
                         data={'Email':username,
                               'Passwd':password,})

    content = {}
    for line in resp.text.split('\n'):
        if line:
            key, val = line.split("=")
            content[key] = val
            
    token = content['Auth']
    headers = {'Authorization': 'GoogleLogin auth=' + token,
               'Appid': app_id,
               'AppKey': app_key}

    resp = requests.get(BASE_URL + "/unread-count", headers=headers)
    unreadcounts = resp.json()
    unread = unreadcounts['unreadcounts'][0]['count']
    return str(unread)


def main_wrapper():
    try:
        return main()
    except Exception as e:
        logger.exception(e)
        return "Err"


if __name__ == "__main__":
    main_wrapper()

#+END_SRC

** mailwatcher.py

Similarly i have a script to count unread emails

#+BEGIN_SRC python :tangle .config/qtile/mailwatcher.py
# Generated from ~/dotfiles/system.org

import imaplib
import subprocess
import pathlib
import logging

LOGFILE = pathlib.Path().home() / ".local/share/qtile/mailwatcher.log"
logger = logging.getLogger(__name__)
handler = logging.FileHandler(LOGFILE)
logger.addHandler(handler)

def main():

    email = subprocess.run(
        ["pass", "email_user"],
        check=True,
        capture_output=True,
        encoding="utf-8",
    ).stdout.strip()
    password = subprocess.run(
        ["pass", "email_password"],
        check=True,
        capture_output=True,
        encoding="utf-8",
    ).stdout.strip()
    SMTP_SERVER = "imap.gmail.com"
    SMTP_PORT = 993

    mail = imaplib.IMAP4_SSL(SMTP_SERVER)
    mail.login(email, password)
    mail.select("inbox")
    _, mail_ids = mail.search(None,"UNSEEN")
    unread = len(mail_ids[0].split())
    return str(unread)

def main_wrapper():
    try:
        return main()
    except Exception as e:
        logger.exception(e)
        return "Err"

if __name__ == "__main__":
    main_wrapper()

#+END_SRC

* GPG

configuring gpg-agent to cache passphrase for a day
https://wiki.archlinux.org/title/GnuPG#gpg-agent

#+begin_src conf :tangle .gnupg/gpg-agent.conf
# Generated from ~/dotfiles/system.org
max-cache-ttl 86000
default-cache-ttl 86000
allow-preset-passphrase
pinentry-program /home/saucoide/.guix-profile/bin/pinentry
#+end_src

* TODO Lenovo Specific

** TODO SD Card reader
According to the archwiki, the SD card has a high power consumption, so i'm using the
following script to toggle it on demand, while remainig disabled


TODO
- Disabling does not persist on boot
  I need to try to find a way to make this autostart (but needs sudo)

#+begin_src bash :tangle scripts/sdcard.sh :tangle-mode (identity #o755)
#!/usr/bin/env bash

set -euo pipefail

# Check if the driver is enabled
if [[ -d "/sys/bus/usb/devices/2-3/driver" ]]; then
    status="Enabled"
else
    status="Disabled"
fi

 
# Update status
if [[ $# -eq 0 ]]; then
    echo "SD Card reader status: ${status}"
elif [[ "${1}" == "on" ]]; then
    if [[ ${status} == "Disabled" ]]; then
        echo 2-3 >> /sys/bus/usb/drivers/usb/bind
        echo "Enabled SD Card reader."
    else
        echo "SD Card reader already enabled. No action taken."
    fi
elif [[ "${1}" == "off" ]]; then
    if [[ ${status} == "Enabled" ]]; then
        echo 2-3 >> /sys/bus/usb/drivers/usb/unbind
        echo "Disabled SD Card reader."
    else
        echo "SD Card reader already disabled. No action taken."
    fi
else
    echo "SD Card reader status: ${status}"
fi

#+end_src

** Undervolting

I'm using ~intel-undervolt~ and undervolted by -90mv

set on ~/etc/intel-undervolt.conf~: =undervolt 2 'CPU Cache' -100=

#+begin_src bash
# install
pacman -Syyu intel-undervolt
# edit /etc/intel-undervolt.conf and then:
intel-undervolt apply
intel-undervolt read
systemctl enable intel-undervolt
#+end_src
