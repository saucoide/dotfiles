#+TITLE: Macbook's configuration
#+AUTHOR: Sauco
#+DESCRIPTION: work's macbook system config
#+STARTUP: content

* Introduction

For now i'm using amethyst as a tiling window manager, pending to try yabai

It is a literate config written in org-mode, use =org-babel-tangle= to
write the code blocks to their location.

My emacs configuration is in a separate [[emacs_config.org][]] file.

I then use GNU Stow to symlink everything inside =~/dotfiles= into the home directory by

#+BEGIN_SRC bash
stow .
#+END_SRC

* WIP NIX

Still a work in progress, but moving all installed software to nix using ~nix
profile~. And =flake.nix= flakes in each project for the development
environment

I am not yet using home-manager or nix-darwin so im installing global packages
imperatively.

In the future i'll try to move this to be truly declarative, for now, i just
install the list.

* Software

software I've installed via homebrew

#+begin_src sh :tangle software_install.sh

# gui
brew install --cask amethyst                    # Tiling window manager
brew install --cask flameshot                   # Screenshot utility
brew install --cask marta                       # File manager
brew install --cask font-jetbrains-mono         # Font
brew install --cask font-source-code-pro        # Font
brew install --cask teamviewer                  # To enable remote connection

# cli
brew install alacritty                          # The terminal i use
brew install fish                               # My shell of choice
brew install starship                           # A nice prompt for my shell
brew install lsd                                # A better `ls`
brew install broot
brew install htop                               # htop
brew install tree                               # htop
brew install ripgrep                            # grep everything
brew install neofetch                           # neofetch
brew install neovim                             # Terminal text editor
brew install ranger                             # Terminal file manager
brew install stow                               # To organize my dotfiles
brew install miniconda                          # python package manager
brew install jq                                 # json cli processor

# window manager
brew install koekeishiya/formulae/yabai --HEAD  # Tiling window manager
brew install koekeishiya/formulae/skhd          # key binding remapping
brew install --cask ubersicht                   # top bar replacement w/ yabai
# simple bar lite 
git clone https://github.com/Jean-Tinland/simple-bar-lite $HOME/Library/Application\ Support/Ãœbersicht/widgets/simple-bar-lite
# This is basically xrandr for macOS
brew tap jakehilborn/jakehilborn && brew install displayplacer
#+end_src

* Keyboard shortcuts

I'm using skhd to handle shortcuts and key remappings

** skhd

#+begin_src conf :tangle .config/skhd/skhdrc

# -- launchers --
ctrl + alt - t : $HOME/.nix-profile/Applications/Alacritty.app/Contents/MacOS/alacritty
ctrl + alt - n : /usr/local/bin/emacsclient -c -a ""

# remap flameshot hardcoded keybinding for screenshots (pre 0.11)
ctrl + alt - p : skhd -k "cmd + alt + shift - 0x15"

# kill window
cmd + shift - k : skhd -k "cmd - q"

# fixing copy paste
ctrl - c ["emacsclient" ~
          "Emacs" ~
          "emacs" ~
          "alacritty" ~
          ,* : skhd -k "cmd - c"
]
ctrl - v ["emacsclient" ~
          "Emacs" ~
          "emacs" ~
          "alacritty" ~
          "pycharm" ~
          ,* : skhd -k "cmd - v"
]


# macOS stops recognizing my external screen if i switch from until i tweak a setting
ctrl + cmd + alt - r : displayplacer "id:E0E4A8A2-F420-D885-A57C-1104BE04395F+67AC2230-7465-912E-988E-6E740CE16ADA res:1920x1080 hz:50 color_depth:8 scaling:off origin:(0,0) degree:0" & displayplacer "id:E0E4A8A2-F420-D885-A57C-1104BE04395F+67AC2230-7465-912E-988E-6E740CE16ADA res:1920x1080 hz:60 color_depth:8 scaling:off origin:(0,0) degree:0"
 
ctrl + cmd + alt - t : displayplacer "id:E0E4A8A2-F420-D885-A57C-1104BE04395F+67AC2230-7465-912E-988E-6E740CE16ADA res:1920x1080 hz:60 color_depth:8 scaling:off origin:(0,0) degree:0"
     
     
# -- yabai --

## Set Layout
cmd - t : yabai -m space --layout bsp
cmd - m : yabai -m space --layout stack
cmd - f : yabai -m space --layout float
      
## Move Spaces
cmd - backspace : yabai -m space --focus recent
cmd + alt - left : yabai -m space --focus prev
cmd + alt - right : yabai -m space --focus next
cmd - 0x12 : yabai -m space --focus 1
cmd - 0x13 : yabai -m space --focus 2
cmd - 0x14 : yabai -m space --focus 3
cmd - 0x15 : yabai -m space --focus 4
cmd - 0x17 : yabai -m space --focus 5
cmd - 0x16 : yabai -m space --focus 6
cmd - 0x1A : yabai -m space --focus 7
cmd - 0x1C : yabai -m space --focus 8
cmd - 0x19 : yabai -m space --focus 9
cmd - 0x53 : yabai -m space --focus 1
cmd - 0x54 : yabai -m space --focus 2
cmd - 0x55 : yabai -m space --focus 3
cmd - 0x56 : yabai -m space --focus 4
cmd - 0x57 : yabai -m space --focus 5
cmd - 0x58 : yabai -m space --focus 6
cmd - 0x59 : yabai -m space --focus 7
cmd - 0x5B : yabai -m space --focus 8
cmd - 0x5C : yabai -m space --focus 9
    
      
## Move Windows to Space & Focus
### Number row
cmd + shift - 0x12 : yabai -m window --space 1; yabai -m space --focus 1
cmd + shift - 0x13 : yabai -m window --space 2; yabai -m space --focus 2
cmd + shift - 0x14 : yabai -m window --space 3; yabai -m space --focus 3
cmd + shift - 0x15 : yabai -m window --space 4; yabai -m space --focus 4
cmd + shift - 0x17 : yabai -m window --space 5; yabai -m space --focus 5
cmd + shift - 0x16 : yabai -m window --space 6; yabai -m space --focus 6
cmd + shift - 0x1A : yabai -m window --space 7; yabai -m space --focus 7
cmd + shift - 0x1C : yabai -m window --space 8; yabai -m space --focus 8
cmd + shift - 0x19 : yabai -m window --space 9; yabai -m space --focus 9

### Numpad    
cmd + shift - 0x53 : yabai -m window --space 1; yabai -m space --focus 1
cmd + shift - 0x54 : yabai -m window --space 2; yabai -m space --focus 2
cmd + shift - 0x55 : yabai -m window --space 3; yabai -m space --focus 3
cmd + shift - 0x56 : yabai -m window --space 4; yabai -m space --focus 4
cmd + shift - 0x57 : yabai -m window --space 5; yabai -m space --focus 5
cmd + shift - 0x58 : yabai -m window --space 6; yabai -m space --focus 6
cmd + shift - 0x59 : yabai -m window --space 7; yabai -m space --focus 7
cmd + shift - 0x5B : yabai -m window --space 8; yabai -m space --focus 8
cmd + shift - 0x5C : yabai -m window --space 9; yabai -m space --focus 9

## Move Windows to Space
### Number row
ctrl + cmd - 0x12 : yabai -m window --space 1
ctrl + cmd - 0x13 : yabai -m window --space 2
ctrl + cmd - 0x14 : yabai -m window --space 3
ctrl + cmd - 0x15 : yabai -m window --space 4
ctrl + cmd - 0x17 : yabai -m window --space 5
ctrl + cmd - 0x16 : yabai -m window --space 6
ctrl + cmd - 0x1A : yabai -m window --space 7
ctrl + cmd - 0x1C : yabai -m window --space 8
ctrl + cmd - 0x19 : yabai -m window --space 9

### Numpad    
ctrl + cmd - 0x53 : yabai -m window --space 1
ctrl + cmd - 0x54 : yabai -m window --space 2
ctrl + cmd - 0x55 : yabai -m window --space 3
ctrl + cmd - 0x56 : yabai -m window --space 4
ctrl + cmd - 0x57 : yabai -m window --space 5
ctrl + cmd - 0x58 : yabai -m window --space 6
ctrl + cmd - 0x59 : yabai -m window --space 7
ctrl + cmd - 0x5B : yabai -m window --space 8
ctrl + cmd - 0x5C : yabai -m window --space 9

## Move Windows
shift + cmd - up : yabai -m window --swap prev
shift + cmd - down : yabai -m window --swap next
shift + cmd - right : yabai -m window --warp next
shift + cmd - left : yabai -m window --warp prev
    
## Window Focus
### Navigation
cmd - h : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus prev; else; yabai -m window --focus stack.prev;end
cmd - j : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus next; else; yabai -m window --focus stack.prev;end
cmd - k : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus prev; else; yabai -m window --focus stack.next;end
cmd - l : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ];yabai -m window --focus next; else; yabai -m window --focus stack.next;end
cmd - left : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus prev; else; yabai -m window --focus stack.prev;end
cmd - down : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus next; else; yabai -m window --focus stack.prev;end
cmd - up : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ]; yabai -m window --focus prev; else; yabai -m window --focus stack.next;end
cmd - right : if [ (yabai -m query --spaces --space | jq -re '.type') = "bsp" ];yabai -m window --focus next; else; yabai -m window --focus stack.next;end



# Float / Unfloat window
cmd + shift - f : yabai -m window --toggle float
# Make window sticky (all spaces)
cmd + shift - 0x43 : yabai -m window --toggle sticky 
cmd + shift -b : yabai -m window --toggle border

## Resize Windows
ctrl + cmd - 0x18 : yabai -m space --balance

# Resize windows
ctrl + cmd - left : yabai -m window --resize left:-75:0; \
                  yabai -m window --resize right:-74:0
ctrl + cmd - down : yabai -m window --resize bottom:0:50; \
                  yabai -m window --resize top:0:75
ctrl + cmd - up : yabai -m window --resize top:0:-75; \
                  yabai -m window --resize bottom:0:-75
ctrl + cmd - right : yabai -m window --resize right:75:0; \
                  yabai -m window --resize left:75:0

#+end_src

** MacOS defaultkeybidings

Some macos applications use this file for key bindings, here i'm changing the behavior of
~home~ and ~end~

#+begin_src conf :tangle ~/Library/KeyBindings/DefaultKeyBinding.dict
{
  "\UF729"  = moveToBeginningOfLine:;
  "\UF72B"  = moveToEndOfLine:;
  "$\UF729" = moveToBeginningOfLineAndModifySelection:;
  "$\UF72B" = moveToEndOfLineAndModifySelection:;
}
#+end_src

* Yabai

I'm using yabai for now ~yabai &;disown~ if brew services doesnt launch it

#+begin_src conf :tangle .config/yabai/yabairc :tangle-mode (identity #o755)

# this is needed to load the scripting additions, might need to run manually
sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

# ===== gaps ======
gaps["top"]="4"
gaps["bottom"]="4"
gaps["left"]="4"
gaps["right"]="4"
gaps["inner"]="4"

# ===== Tiling setting ======

yabai -m config layout                      bsp

yabai -m config top_padding                 "${gaps["top"]}"
yabai -m config bottom_padding              "${gaps["bottom"]}"
yabai -m config left_padding                "${gaps["left"]}"
yabai -m config right_padding               "${gaps["right"]}"
yabai -m config window_gap                  "${gaps["inner"]}"
yabai -m config external_bar                all:25:0

yabai -m config mouse_follows_focus         off
yabai -m config focus_follows_mouse         off

yabai -m config window_opacity              off
yabai -m config window_shadow               float

yabai -m config active_window_opacity       1.0
yabai -m config normal_window_opacity       0.90
yabai -m config split_ratio                 0.66

yabai -m config auto_balance                off

yabai -m config mouse_modifier              alt
yabai -m config mouse_action1               move
yabai -m config mouse_action2               resize


# ===== Rules =======

# These are misbehaving apps that freeze when managed
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="flameshot" app="^Flameshot$" title=".*" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Finder" app="^Finder$" manage=off
yabai -m rule --add label="System Preferences" app="^System Preferences$" title=".*" manage=off
yabai -m rule --add label="App Store" app="^App Store$" manage=off
yabai -m rule --add label="Activity Monitor" app="^Activity Monitor$" manage=off
yabai -m rule --add label="Calculator" app="^Calculator$" manage=off
yabai -m rule --add label="Software Update" title="Software Update" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add app="^zoom.us" manage=off
# yabai -m rule --add app="Emacs" manage=on

# === Top Bar ===
sketchybar &
# === Borders ===
borders active_color=0xff50fa7b inactive_color=0xff494d64 width=3.0 2>/dev/null 1>&2 &
#+end_src

* Python

To change the default breakpoint: ~export PYTHONBREAKPOINT=ipdb.set_trace~

** .pdbrc.py

#+begin_src python :tangle .pdbrc.py

# Generated from ~/dotfiles/system.org

# pdb++
import pdb

class Config(pdb.DefaultConfig):
    sticky_by_default = True

# ipdb
# import IPython
# from traitlets.config import get_config

# cfg = get_config()
# cfg.InteractiveShellEmbed.colors = "Linux"  # syntax highlighting
# cfg.InteractieShellEmbed.confirm_exit = False

# alias interacti IPython.embed(config=cfg)

#+end_src

** .pythonrc.py

#+begin_src python :tangle .pythonrc.py

# Generated from ~/dotfiles/system.org
from importlib import util
from functools import partial


try:
    # make ipython pretty
    if __IPYTHON__ and util.find_spec("rich"):
        from rich import inspect, pretty, print, traceback
        from IPython import get_ipython
        from IPython.core.magic import (
            Magics,
            line_magic,
            magics_class,
        )

        # rich pretty printers
        help = partial(inspect, help=True)
        pretty.install()
        traceback.install()

        @magics_class
        class CustomMagics(Magics):
            def _get_var_ref(self, line):
                var_name = line.strip()
                if var_name in self.shell.user_ns:
                    return self.shell.user_ns[var_name]

            @line_magic
            def pinfo(self, line):
                """Overwrite ipython's pinfo (= ?)"""
                var_ref = self._get_var_ref(line)
                if var_ref:
                    return inspect(var_ref, help=True)
                else:
                    return f"Object '{line.strip()}' not found."

            @line_magic
            def pinfo2(self, line):
                """Overwrite ipython's pinfo2 (= ??)"""
                var_ref = self._get_var_ref(line)
                if var_ref:
                    return inspect(var_ref, help=True, methods=True, docs=True)
                else:
                    return f"Object '{line.strip()}' not found."

            @line_magic
            def h(self, line):
                """add a %h magic to print ALL"""
                var_ref = self._get_var_ref(line)
                if var_ref:
                    return inspect(var_ref, all=True, sort=False)
                else:
                    return f"Object '{line.strip()}' not found."

        get_ipython().register_magics(CustomMagics)
except NameError:
    pass
#+end_src

* Postgres
** pgcli

#+begin_src conf :tangle .config/pgcli/config

# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled, all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = False

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = True

# If multi_line_mode is set to "psql", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to "safe", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = psql

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database",
# "shutdown", "delete", or "update".
# Possible values:
# "all" - warn on data definition statements, server actions such as SHUTDOWN, DELETE or UPDATE
# "moderate" - skip warning on UPDATE statements, except for unconditional updates
# "off" - skip all warnings
destructive_warning = all

# Enables expand mode, which is similar to `\x` in psql.
expand = False

# Enables auto expand mode, which is similar to `\x auto` in psql.
auto_expand = True

# If set to True, table suggestions will include a table alias
generate_aliases = False

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = default

# keyword casing preference. Possible values: "lower", "upper", "auto"
keyword_casing = auto

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = False

# Casing of column headers based on the casing_file described above
case_column_headers = True

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = default

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = INFO

# Order of columns when expanding * to column list
# Possible values: "table_order" and "alphabetic"
asterisk_column_order = table_order

# Whether to qualify with table alias/name when suggesting columns
# Possible values: "always", "never" and "if_more_than_one_table"
qualify_columns = if_more_than_one_table

# When no schema is entered, only suggest objects in search_path
search_path_filter = False

# Default pager.
# By default 'PAGER' environment variable is used
# pager = less -SRXF

# Timing of sql statements and table rendering.
timing = True

# Show/hide the informational toolbar with function keymap at the footer.
show_bottom_toolbar = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv, sql-insert, sql-update,
# sql-update-1, sql-update-2 (formatter with sql-* prefix can format query
# output to executable insertion or updating sql).
# Recommended: psql, fancy_grid and grid.
table_format = psql

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
syntax_style = default

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = True

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values "STOP" or "RESUME"
on_error = STOP

# Set threshold for row limit. Use 0 to disable limiting.
row_limit = 1000

# Truncate long text fields to this value for tabular display (does not apply to csv).
# Leave unset to disable truncation. Example: "max_field_width = "
# Be aware that formatting might get slow with values larger than 500 and tables with
# lots of records.
max_field_width = 500

# Skip intro on startup and goodbye on exit
less_chatty = False

# Postgres prompt
# \t - Current date and time
# \u - Username
# \h - Short hostname of the server (up to first '.')
# \H - Hostname of the server
# \d - Database name
# \p - Database port
# \i - Postgres PID
# \# - "@" sign if logged in as superuser, '>' in other case
# \n - Newline
# \dsn_alias - name of dsn alias if -D option is used (empty otherwise)
# \x1b[...m - insert ANSI escape sequence
# eg: prompt = '\x1b[35m\u@\x1b[32m\h:\x1b[36m\d>'
# prompt = '\u@\h:\d> '
prompt = '\x1b[1m\u on \h@\x1b[38;5;82m\d\x1b[;37m\nâžœ '

# Number of lines to reserve for the suggestion menu
min_num_menu_lines = 4

# Character used to left pad multi-line queries to match the prompt size.
multiline_continuation_char = ''

# The string used in place of a null value.
null_string = '<null>'

# manage pager on startup
enable_pager = True

# Use keyring to automatically save and load password in a secure manner
keyring = True

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = 'bg:#ffffff #000000'
completion-menu.completion = 'bg:#008888 #ffffff'
completion-menu.meta.completion.current = 'bg:#44aaaa #000000'
completion-menu.meta.completion = 'bg:#448888 #ffffff'
completion-menu.multi-column-meta = 'bg:#aaffff #000000'
scrollbar.arrow = 'bg:#003333'
scrollbar = 'bg:#00aaaa'
selected = '#ffffff bg:#6666aa'
search = '#ffffff bg:#4444aa'
search.current = '#ffffff bg:#44aa44'
bottom-toolbar = 'bg:#222222 #aaaaaa'
bottom-toolbar.off = 'bg:#222222 #888888'
bottom-toolbar.on = 'bg:#222222 #ffffff'
search-toolbar = 'noinherit bold'
search-toolbar.text = 'nobold'
system-toolbar = 'noinherit bold'
arg-toolbar = 'noinherit bold'
arg-toolbar.text = 'nobold'
bottom-toolbar.transaction.valid = 'bg:#222222 #00ff5f bold'
bottom-toolbar.transaction.failed = 'bg:#222222 #ff005f bold'
# These three values can be used to further refine the syntax highlighting.
# They are commented out by default, since they have priority over the theme set
# with the `syntax_style` setting and overriding its behavior can be confusing.
# literal.string = '#ba2121'
# literal.number = '#666666'
# keyword = 'bold #008000'

# style classes for colored table output
output.header = "#00ff5f bold"
output.odd-row = ""
output.even-row = ""
output.null = "#808080"

# Named queries are queries you can execute by name.
[named queries]

# DSN to call by -D option
[alias_dsn]
# example_dsn = postgresql://[user[:password]@][netloc][:port][/dbname]

# Format for number representation
# for decimal "d" - 12345678, ",d" - 12,345,678
# for float "g" - 123456.78, ",g" - 123,456.78
[data_formats]
decimal = ""
float = ""

#+end_src

* .profile

#+begin_src sh :tangle .profile

export PYTHONBREAKPOINT=pdb.set_trace
export PYTHONSTARTUP=$HOME/.pythonrc.py
export EDITOR="emacsclient -t --alternate-editor=nvim"
export SSH_ENV="$HOME/.ssh/agent-environment"
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

#+end_src

* Terminal

I'm using alacritty as my terminal

** Alacritty

#+BEGIN_SRC yaml :tangle .config/alacritty/alacritty.toml
#
# Generated from ~/dotfiles/system.org
#
[colors]
draw_bold_text_with_bright_colors = true

[colors.bright]
black = "#727072"
blue = "#FC9867"
cyan = "#78DCE8"
green = "#A9DC76"
magenta = "#AB9DF2"
red = "#FF6188"
white = "#FCFCFA"
yellow = "#FFD866"

[colors.normal]
black = "#403E41"
blue = "#FC9867"
cyan = "#78DCE8"
green = "#A9DC76"
magenta = "#AB9DF2"
red = "#FF6188"
white = "#FCFCFA"
yellow = "#FFD866"

[colors.primary]
background = "#2D2A2E"
foreground = "#FCFCFA"

[env]
TERM = "xterm-256color"

[font]
size = 12.0

[font.bold]
family = "JetBrainsMono Nerd Font Mono"
style = "Bold"

[font.bold_italic]
family = "JetBrainsMono Nerd Font Mono"
style = "Bold Italic"

[font.italic]
family = "JetBrainsMono Nerd Font Mono"
style = "Italic"

[font.normal]
family = "JetBrainsMono Nerd Font Mono"
style = "Regular"

[font.offset]
x = 0
y = 1

[[keyboard.bindings]]
action = "Paste"
key = "V"
mods = "Control|Shift"

[[keyboard.bindings]]
action = "Copy"
key = "C"
mods = "Control|Shift"

[[keyboard.bindings]]
action = "PasteSelection"
key = "Insert"
mods = "Shift"

[[keyboard.bindings]]
action = "ResetFontSize"
key = "Key0"
mods = "Control"

[[keyboard.bindings]]
action = "IncreaseFontSize"
key = "Equals"
mods = "Control"

[[keyboard.bindings]]
action = "IncreaseFontSize"
key = "Plus"
mods = "Control"

[[keyboard.bindings]]
action = "DecreaseFontSize"
key = "Minus"
mods = "Control"

[[keyboard.bindings]]
action = "ToggleFullscreen"
key = "F11"
mods = "None"

[[keyboard.bindings]]
action = "Paste"
key = "Paste"
mods = "None"

[[keyboard.bindings]]
action = "Copy"
key = "Copy"
mods = "None"

[[keyboard.bindings]]
action = "ClearLogNotice"
key = "L"
mods = "Control"

[[keyboard.bindings]]
chars = "\f"
key = "L"
mods = "Control"

[[keyboard.bindings]]
action = "ScrollPageUp"
key = "PageUp"
mode = "~Alt"
mods = "None"

[[keyboard.bindings]]
action = "ScrollPageDown"
key = "PageDown"
mode = "~Alt"
mods = "None"

[[keyboard.bindings]]
action = "ScrollToTop"
key = "Home"
mode = "~Alt"
mods = "Shift"

[[keyboard.bindings]]
action = "ScrollToBottom"
key = "End"
mode = "~Alt"
mods = "Shift"


[scrolling]
history = 5000

[shell]
program = "/Users/saucon/.nix-profile/bin/fish"

[window]
decorations = "buttonless"
dynamic_padding = false
opacity = 1.0
title = "Alacritty"

[window.class]
general = "Alacritty"
instance = "Alacritty"

[window.padding]
x = 6
y = 6
#+END_SRC

** bashrc

#+BEGIN_SRC conf :tangle .bashrc
#
# Generated from ~/dotfiles/system.org
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export HISTCONTROL=ignoreboth:erasedups

# PS1='\u@\h:\W\$ '
PS1='\[\e[31m\]\u\[\e[34m\]@\h:\[\e[32m\]\w$ \[\e[0m\]'

# PATH

if [ -d "$HOME/.bin" ] ;
  then PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ;
  then PATH="$HOME/.local/bin:$PATH"
fi

export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
export PATH="$HOME/google-cloud-sdk/bin:$PATH"

# export EDITOR="emacsclient -c"

# use vim as manpager
export MANPAGER='/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'

# list (exa is a replacement for ls)
alias ls='exa --long --all --classify --color=always --group-directories-first'
alias lsd='exa --long --all --classify --color=always --only-dirs'

# fix obvious typos
alias cd..='cd ..'

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

#readable output
alias df='df --human-readable'

#pacman unlock
alias unlock="sudo rm /var/lib/pacman/db.lck"

#free
alias free="free -mt"

#use all cores
alias uac="sh ~/.bin/main/000*"

#continue download
alias wget="wget -c"

#userlist
alias userlist="cut -d: -f1 /etc/passwd"

#merge new settings
alias merge="xrdb -merge ~/.Xresources"

#ps
alias psa="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

#calendar
alias cal="cal -y -m"

#Recent Installed Packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"
alias riplong="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -3000 | nl"

# # ex = EXtractor for all kinds of archives
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      ,*.tar.bz2)   tar xjf $1   ;;
      ,*.tar.gz)    tar xzf $1   ;;
      ,*.bz2)       bunzip2 $1   ;;
      ,*.rar)       unrar x $1   ;;
      ,*.gz)        gunzip $1    ;;
      ,*.tar)       tar xf $1    ;;
      ,*.tbz2)      tar xjf $1   ;;
      ,*.tgz)       tar xzf $1   ;;
      ,*.zip)       unzip $1     ;;
      ,*.Z)         uncompress $1;;
      ,*.7z)        7z x $1      ;;
      ,*.deb)       ar x $1      ;;
      ,*.tar.xz)    tar xf $1    ;;
      ,*.tar.zst)   unzstd $1    ;;
      ,*)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

#+END_SRC

** fish

The recommended way to config fish is to add separate functions to the ~/functions~
directory that will be autoloaded, but i prefer to configure everything in a single file,
so i'll just replace ~config.fish~

#+BEGIN_SRC sh :tangle .config/fish/config.fish

# Get most envvars from profile (requires oh-my-fish & fenv installed)
fenv source "$HOME/.profile"

# PATH
# ---------------------------------------------------------------------
fish_add_path --prepend "$HOME/bin"
fish_add_path --prepend "$HOME/.local/bin"
fish_add_path --prepend "$HOME/.emacs.d/bin"
fish_add_path --prepend "$HOME/.poetry/bin"
fish_add_path --prepend "/usr/bin/"
fish_add_path --prepend "/usr/local/bin"
fish_add_path --prepend "$HOME/scripts"
fish_add_path --prepend "$HOME/.nix-profile/bin"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '$HOME/google-cloud-sdk/path.fish.inc' ]; . '$HOME/google-cloud-sdk/path.fish.inc'; end
# ---------------------------------------------------------------------

# Environment Variables
# ---------------------------------------------------------------------
# Set vim as Manpager
set --export MANPAGER '/bin/bash -c "vim -MRn -c \"set buftype=nofile showtabline=0 ft=man ts=8 nomod nolist norelativenumber nonu noma\" -c \"normal L\" -c \"nmap q :qa<CR>\"</dev/tty <(col -b)"'
# ---------------------------------------------------------------------


# Aliases
# ---------------------------------------------------------------------
## List - using exa as a replacement for ls 
alias ls="lsd --long --group-dirs=first --date '+%Y-%m-%d %H:%M'"
alias lsa="lsd --long --group-dirs=first --almost-all --date '+%Y-%m-%d %H:%M'"
alias lst="lsd --long --group-dirs=first --tree --depth=2 --date '+%Y-%m-%d %H:%M'"
## I always miss the space
alias cd..="cd .."
## bat is better than cat
alias cat="bat"
## Colorize the grep command output 
alias grep='grep --color=auto'
## File system space info in readable format
alias df='df --human-readable'
## Memory info 
alias free="free -mt"
## Continue download
alias wget="wget -c"
## Userlist
alias userlist="cut -d: -f1 /etc/passwd"
## Calendar show full year
alias cal="cal -y -m"
## neovim
alias vim="nvim"
## yabai toggle
alias stopyabai="brew services stop yabai"
alias startyabai="brew services start yabai"
## docker/podman
alias docker="podman"
alias docker-compose="podman-compose"
alias podman-into-bash='podman run --tty --interactive --entrypoint="/bin/bash"'
alias podman-into-shell='podman run --tty --interactive --entrypoint="/bin/sh"'
## kubectl
alias k="kubectl"
alias kn="kube_namespace"
alias kc="kube_context"
# gcloud
alias gcp="gcloud_change_project"
alias gc="gcloud"
# ---------------------------------------------------------------------


# Functions
# ---------------------------------------------------------------------

# Startup greeter
function fish_greeting
    # neofetch --ascii_distro Arcolinux_small --disable gpu de kernel packages
    # neofetch --disable gpu term de wm kernel packages model distro shell resolution cols --memory_percent on 
    neofetch --cpu_temp on  --disable gpu term de wm kernel packages model distro shell resolution cols cpu --memory_percent on --off
end

# Use vim as default key bindings
function fish_user_key_bindings
  fish_vi_key_bindings
end

# Function for creating a backup file
# ex: backup file.txt
# result: copies file as file.txt.bak
function backup --argument filename
    cp $filename $filename.bak
end

# Kubernetes utility functions
function kube_namespace --wraps "kubectl get namespaces"
  if test (count $argv) -gt 0
    set namespace $argv[1]
    set -e argv[1]
    kubectl config set-context --current --namespace=$namespace $argv
  else
    kubectl get namespaces
  end
end

function kube_context --wraps "kubectl config use-context"
  if test (count $argv) -gt 0
    set context $argv[1]
    set -e argv[1]
    kubectl config use-context $context $argv
  else
    kubectl config get-contexts
  end
end

function gcloud_change_project --wraps "gcloud config set project"
  if test (count $argv) -gt 0
    set project $argv[1]
    set -e argv[1]
    gcloud config set project $project $argv
  else
    gcloud projects list
  end
end

# Function to extract a variety of archives
# usage: extract <file>
function extract
  for arg in $argv
    if test -f $arg
      switch $arg
        case "*tar.bz2" "*.tbz2"
             tar xjf $arg
        case "*tar.gz" "*.tgz"
             tar xzf $arg
        case "*.bz2"
             bunzip2 $arg
        case "*rar"
             unrar x $arg
        case "*.gz"
             gunzip $arg
        case "*.tar"
             tar xf $arg
        case "*.zip"
             unzip $arg
        case "*.Z"
             uncompress $arg
        case "*7z"
             7z x $arg
        case "*.deb"
             ar x $arg
        case "*tar.xz"
             tar xz $arg
        case "*tar.zst"
             tar unzstd $arg
        case "*"
          set_color red
          echo "I don't know how to extract this type of archive: `$arg`"
          set_color normal
      end
    else
        set_color red
        echo "Not a valid file: `$arg`"
        set_color normal
    end
  end
end


function vterm_printf;
    if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end 
        # tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
    else if string match -q -- "screen*" "$TERM"
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$argv"
    else
        printf "\e]%s\e\\" "$argv"
    end
end

function vterm_prompt_end;
    vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
end

functions --copy fish_prompt vterm_old_fish_prompt

function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
    # Remove the trailing newline from the original prompt. This is done
    # using the string builtin from fish, but to make sure any escape codes
    # are correctly interpreted, use %b for printf.
    printf "%b" (string join "\n" (vterm_old_fish_prompt))
    vterm_prompt_end
end
# ---------------------------------------------------------------------


# Fish colors
# ---------------------------------------------------------------------
set fish_color_normal white
set fish_color_command blue
set fish_color_keyword yellow
set fish_color_quote green
set fish_color_error red
set fish_color_param purple
# fish_color_redirection
# fish_color_end
# fish_color_comment
set fish_color_selection black
# fish_color_operator
# fish_color_escape
set fish_color_autosuggestion "4c566a"
# fish_color_cwd
# fish_color_user
# fish_color_host
# fish_color_host_remote
# fish_color_cancel
# fish_color_search_match
# ---------------------------------------------------------------------

# pyenv setup
# set -Ux PYENV_ROOT $HOME/.pyenv
# fish_add_path $PYENV_ROOT/bin
# pyenv init - | source
# eval "$(pyenv virtualenv-init -)"

# direnv setup
direnv hook fish | source

# startship
starship init fish | source

#+END_SRC

*** Starship

To customize some icons

#+begin_src conf :tangle .config/starship.toml
    
# Inserts a blank line between shell prompts
add_newline = true

[character] 
success_symbol = "[âžœ](green)"
error_symbol = "[âžœ](red)"
vicmd_symbol = "[N](bold blue)"

[python]
symbol = "îœ¼ "

# Disable the package module, hiding it from the prompt completely
[package]
disabled = true

[kubernetes]
disabled = false
style = "#0189f8 bold"
         
#+end_src

* Neovim

Using kickstarter
https://github.com/nvim-lua/kickstart.nvimhttps://github.com/nvim-lua/kickstart.nvim

#+begin_src lua :tangle .config/nvim/init.lua
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- [[ Install `lazy.nvim` plugin manager ]]
--    https://github.com/folke/lazy.nvim
--    `:help lazy.nvim.txt` for more info
local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system {
    'git',
    'clone',
    '--filter=blob:none',
    'https://github.com/folke/lazy.nvim.git',
    '--branch=stable', -- latest stable release
    lazypath,
  }
end
vim.opt.rtp:prepend(lazypath)

-- [[ Configure plugins ]]
-- NOTE: Here is where you install your plugins.
--  You can configure plugins using the `config` key.
require('lazy').setup({

  -- Detect tabstop and shiftwidth automatically
  'tpope/vim-sleuth',

  -- NOTE: This is where your plugins related to LSP can be installed.
  --  The configuration is done below. Search for lspconfig to find it below.
  {
    -- LSP Configuration & Plugins
    'neovim/nvim-lspconfig',
    dependencies = {
      -- Automatically install LSPs to stdpath for neovim
      { 'williamboman/mason.nvim', config = true },
      'williamboman/mason-lspconfig.nvim',

      -- Useful status updates for LSP
      -- NOTE: `opts = {}` is the same as calling `require('fidget').setup({})`
      { 'j-hui/fidget.nvim', opts = {} },

      -- Additional lua configuration, makes nvim stuff amazing!
      'folke/neodev.nvim',
    },
  },

  {
    -- Autocompletion
    'hrsh7th/nvim-cmp',
    dependencies = {
      -- Snippet Engine & its associated nvim-cmp source
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip',

      -- Adds LSP completion capabilities
      'hrsh7th/cmp-nvim-lsp',
      'hrsh7th/cmp-path',

      -- Adds a number of user-friendly snippets
      'rafamadriz/friendly-snippets',
    },
  },

  -- Useful plugin to show you pending keybinds.
  { 'folke/which-key.nvim', opts = {} },
  {
    -- Adds git related signs to the gutter, as well as utilities for managing changes
    'lewis6991/gitsigns.nvim',
    opts = {
      -- See `:help gitsigns.txt`
      signs = {
        add = { text = '+' },
        change = { text = '~' },
        delete = { text = '_' },
        topdelete = { text = 'â€¾' },
        changedelete = { text = '~' },
      },
      on_attach = function(bufnr)
        local gs = package.loaded.gitsigns

        local function map(mode, l, r, opts)
          opts = opts or {}
          opts.buffer = bufnr
          vim.keymap.set(mode, l, r, opts)
        end

        -- Navigation
        map({ 'n', 'v' }, ']c', function()
          if vim.wo.diff then
            return ']c'
          end
          vim.schedule(function()
            gs.next_hunk()
          end)
          return '<Ignore>'
        end, { expr = true, desc = 'Jump to next hunk' })

        map({ 'n', 'v' }, '[c', function()
          if vim.wo.diff then
            return '[c'
          end
          vim.schedule(function()
            gs.prev_hunk()
          end)
          return '<Ignore>'
        end, { expr = true, desc = 'Jump to previous hunk' })

        -- Actions
        -- visual mode
        map('v', '<leader>hs', function()
          gs.stage_hunk { vim.fn.line '.', vim.fn.line 'v' }
        end, { desc = 'stage git hunk' })
        map('v', '<leader>hr', function()
          gs.reset_hunk { vim.fn.line '.', vim.fn.line 'v' }
        end, { desc = 'reset git hunk' })
        -- normal mode
        map('n', '<leader>hs', gs.stage_hunk, { desc = 'git stage hunk' })
        map('n', '<leader>hr', gs.reset_hunk, { desc = 'git reset hunk' })
        map('n', '<leader>hS', gs.stage_buffer, { desc = 'git Stage buffer' })
        map('n', '<leader>hu', gs.undo_stage_hunk, { desc = 'undo stage hunk' })
        map('n', '<leader>hR', gs.reset_buffer, { desc = 'git Reset buffer' })
        map('n', '<leader>hp', gs.preview_hunk, { desc = 'preview git hunk' })
        map('n', '<leader>hb', function()
          gs.blame_line { full = false }
        end, { desc = 'git blame line' })
        map('n', '<leader>hd', gs.diffthis, { desc = 'git diff against index' })
        map('n', '<leader>hD', function()
          gs.diffthis '~'
        end, { desc = 'git diff against last commit' })

        -- Toggles
        map('n', '<leader>tb', gs.toggle_current_line_blame, { desc = 'toggle git blame line' })
        map('n', '<leader>td', gs.toggle_deleted, { desc = 'toggle git show deleted' })

        -- Text object
        map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'select git hunk' })
      end,
    },
  },

  {
    -- Theme inspired by Atom
    'navarasu/onedark.nvim',
    priority = 1000,
    config = function()
      vim.cmd.colorscheme 'onedark'
    end,
  },

  {
    -- Set lualine as statusline
    'nvim-lualine/lualine.nvim',
    -- See `:help lualine.txt`
    opts = {
      options = {
        icons_enabled = false,
        theme = 'onedark',
        component_separators = '|',
        section_separators = '',
      },
    },
  },

  -- Fuzzy Finder (files, lsp, etc)
  {
    'nvim-telescope/telescope.nvim',
    branch = '0.1.x',
    dependencies = {
      'nvim-lua/plenary.nvim',
      -- Fuzzy Finder Algorithm which requires local dependencies to be built.
      -- Only load if `make` is available. Make sure you have the system
      -- requirements installed.
      {
        'nvim-telescope/telescope-fzf-native.nvim',
        -- NOTE: If you are having trouble with this installation,
        --       refer to the README for telescope-fzf-native for more instructions.
        build = 'make',
        cond = function()
          return vim.fn.executable 'make' == 1
        end,
      },
    },
  },

  {
    -- Highlight, edit, and navigate code
    'nvim-treesitter/nvim-treesitter',
    dependencies = {
      'nvim-treesitter/nvim-treesitter-textobjects',
    },
    build = ':TSUpdate',
  },

}, {})

-- [[ Setting options ]]
-- See `:help vim.o`
-- NOTE: You can change these options as you wish!

-- Set highlight on search
vim.o.hlsearch = false

-- Make line numbers default
vim.wo.number = true

-- Enable mouse mode
vim.o.mouse = 'a'

-- Sync clipboard between OS and Neovim.
--  Remove this option if you want your OS clipboard to remain independent.
--  See `:help 'clipboard'`
vim.o.clipboard = 'unnamedplus'

-- Enable break indent
vim.o.breakindent = true

-- Save undo history
vim.o.undofile = true

-- Case-insensitive searching UNLESS \C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

-- Keep signcolumn on by default
vim.wo.signcolumn = 'yes'

-- Decrease update time
vim.o.updatetime = 250
vim.o.timeoutlen = 300

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- NOTE: You should make sure your terminal supports this
vim.o.termguicolors = true

-- [[ Basic Keymaps ]]

-- Keymaps for better default experience
-- See `:help vim.keymap.set()`
vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

-- Remap for dealing with word wrap
vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

-- Diagnostic keymaps
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Go to previous diagnostic message' })
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Go to next diagnostic message' })
vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float, { desc = 'Open floating diagnostic message' })
vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostics list' })

-- [[ Highlight on yank ]]
-- See `:help vim.highlight.on_yank()`
local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
vim.api.nvim_create_autocmd('TextYankPost', {
  callback = function()
    vim.highlight.on_yank()
  end,
  group = highlight_group,
  pattern = '*',
})

-- [[ Configure Telescope ]]
-- See `:help telescope` and `:help telescope.setup()`
require('telescope').setup {
  defaults = {
    mappings = {
      i = {
        ['<C-u>'] = false,
        ['<C-d>'] = false,
      },
    },
  },
}

-- Enable telescope fzf native, if installed
pcall(require('telescope').load_extension, 'fzf')

-- Telescope live_grep in git root
-- Function to find the git root directory based on the current buffer's path
local function find_git_root()
  -- Use the current buffer's path as the starting point for the git search
  local current_file = vim.api.nvim_buf_get_name(0)
  local current_dir
  local cwd = vim.fn.getcwd()
  -- If the buffer is not associated with a file, return nil
  if current_file == '' then
    current_dir = cwd
  else
    -- Extract the directory from the current file's path
    current_dir = vim.fn.fnamemodify(current_file, ':h')
  end

  -- Find the Git root directory from the current file's path
  local git_root = vim.fn.systemlist('git -C ' .. vim.fn.escape(current_dir, ' ') .. ' rev-parse --show-toplevel')[1]
  if vim.v.shell_error ~= 0 then
    print 'Not a git repository. Searching on current working directory'
    return cwd
  end
  return git_root
end

-- Custom live_grep function to search in git root
local function live_grep_git_root()
  local git_root = find_git_root()
  if git_root then
    require('telescope.builtin').live_grep {
      search_dirs = { git_root },
    }
  end
end

vim.api.nvim_create_user_command('LiveGrepGitRoot', live_grep_git_root, {})

-- See `:help telescope.builtin`
vim.keymap.set('n', '<leader>?', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
vim.keymap.set('n', '<leader><space>', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
vim.keymap.set('n', '<leader>/', function()
  -- You can pass additional configuration to telescope to change theme, layout, etc.
  require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
    winblend = 10,
    previewer = false,
  })
end, { desc = '[/] Fuzzily search in current buffer' })

local function telescope_live_grep_open_files()
  require('telescope.builtin').live_grep {
    grep_open_files = true,
    prompt_title = 'Live Grep in Open Files',
  }
end
vim.keymap.set('n', '<leader>s/', telescope_live_grep_open_files, { desc = '[S]earch [/] in Open Files' })
vim.keymap.set('n', '<leader>ss', require('telescope.builtin').builtin, { desc = '[S]earch [S]elect Telescope' })
vim.keymap.set('n', '<leader>gf', require('telescope.builtin').git_files, { desc = 'Search [G]it [F]iles' })
vim.keymap.set('n', '<leader>sf', require('telescope.builtin').find_files, { desc = '[S]earch [F]iles' })
vim.keymap.set('n', '<leader>sh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
vim.keymap.set('n', '<leader>sw', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
vim.keymap.set('n', '<leader>sg', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
vim.keymap.set('n', '<leader>sG', ':LiveGrepGitRoot<cr>', { desc = '[S]earch by [G]rep on Git Root' })
vim.keymap.set('n', '<leader>sd', require('telescope.builtin').diagnostics, { desc = '[S]earch [D]iagnostics' })
vim.keymap.set('n', '<leader>sr', require('telescope.builtin').resume, { desc = '[S]earch [R]esume' })

-- [[ Configure Treesitter ]]
-- See `:help nvim-treesitter`
-- Defer Treesitter setup after first render to improve startup time of 'nvim {filename}'
vim.defer_fn(function()
  require('nvim-treesitter.configs').setup {
    -- Add languages to be installed here that you want installed for treesitter
    ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'tsx', 'javascript', 'typescript', 'vimdoc', 'vim', 'bash' },

    -- Autoinstall languages that are not installed. Defaults to false (but you can change for yourself!)
    auto_install = false,

    highlight = { enable = true },
    indent = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = '<c-space>',
        node_incremental = '<c-space>',
        scope_incremental = '<c-s>',
        node_decremental = '<M-space>',
      },
    },
    textobjects = {
      select = {
        enable = true,
        lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
        keymaps = {
          -- You can use the capture groups defined in textobjects.scm
          ['aa'] = '@parameter.outer',
          ['ia'] = '@parameter.inner',
          ['af'] = '@function.outer',
          ['if'] = '@function.inner',
          ['ac'] = '@class.outer',
          ['ic'] = '@class.inner',
        },
      },
      move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
          [']m'] = '@function.outer',
          [']]'] = '@class.outer',
        },
        goto_next_end = {
          [']M'] = '@function.outer',
          [']['] = '@class.outer',
        },
        goto_previous_start = {
          ['[m'] = '@function.outer',
          ['[['] = '@class.outer',
        },
        goto_previous_end = {
          ['[M'] = '@function.outer',
          ['[]'] = '@class.outer',
        },
      },
      swap = {
        enable = true,
        swap_next = {
          ['<leader>a'] = '@parameter.inner',
        },
        swap_previous = {
          ['<leader>A'] = '@parameter.inner',
        },
      },
    },
  }
end, 0)

-- [[ Configure LSP ]]
--  This function gets run when an LSP connects to a particular buffer.
local on_attach = function(_, bufnr)
  -- NOTE: Remember that lua is a real programming language, and as such it is possible
  -- to define small helper and utility functions so you don't have to repeat yourself
  -- many times.
  --
  -- In this case, we create a function that lets us more easily define mappings specific
  -- for LSP related items. It sets the mode, buffer and description for us each time.
  local nmap = function(keys, func, desc)
    if desc then
      desc = 'LSP: ' .. desc
    end

    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
  end

  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

  nmap('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
  nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
  nmap('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
  nmap('<leader>D', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

  -- See `:help K` for why this keymap
  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
  nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

  -- Lesser used LSP functionality
  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
  nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
  nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
  nmap('<leader>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, '[W]orkspace [L]ist Folders')

  -- Create a command `:Format` local to the LSP buffer
  vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
    vim.lsp.buf.format()
  end, { desc = 'Format current buffer with LSP' })
end

-- document existing key chains
require('which-key').register {
  ['<leader>c'] = { name = '[C]ode', _ = 'which_key_ignore' },
  ['<leader>d'] = { name = '[D]ocument', _ = 'which_key_ignore' },
  ['<leader>g'] = { name = '[G]it', _ = 'which_key_ignore' },
  ['<leader>h'] = { name = 'Git [H]unk', _ = 'which_key_ignore' },
  ['<leader>r'] = { name = '[R]ename', _ = 'which_key_ignore' },
  ['<leader>s'] = { name = '[S]earch', _ = 'which_key_ignore' },
  ['<leader>t'] = { name = '[T]oggle', _ = 'which_key_ignore' },
  ['<leader>w'] = { name = '[W]orkspace', _ = 'which_key_ignore' },
}
-- register which-key VISUAL mode
-- required for visual <leader>hs (hunk stage) to work
require('which-key').register({
  ['<leader>'] = { name = 'VISUAL <leader>' },
  ['<leader>h'] = { 'Git [H]unk' },
}, { mode = 'v' })

-- mason-lspconfig requires that these setup functions are called in this order
-- before setting up the servers.
require('mason').setup()
require('mason-lspconfig').setup()

-- Enable the following language servers
--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
--
--  Add any additional override configuration in the following tables. They will be passed to
--  the `settings` field of the server config. You must look up that documentation yourself.
--
--  If you want to override the default filetypes that your language server will attach to you can
--  define the property 'filetypes' to the map in question.
local servers = {
  -- clangd = {},
  -- gopls = {},
  -- pyright = {},
  -- rust_analyzer = {},
  -- tsserver = {},
  -- html = { filetypes = { 'html', 'twig', 'hbs'} },

  lua_ls = {
    Lua = {
      workspace = { checkThirdParty = false },
      telemetry = { enable = false },
      -- NOTE: toggle below to ignore Lua_LS's noisy `missing-fields` warnings
      -- diagnostics = { disable = { 'missing-fields' } },
    },
  },
}

-- Setup neovim lua configuration
require('neodev').setup()

-- nvim-cmp supports additional completion capabilities, so broadcast that to servers
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- Ensure the servers above are installed
local mason_lspconfig = require 'mason-lspconfig'

mason_lspconfig.setup {
  ensure_installed = vim.tbl_keys(servers),
}

mason_lspconfig.setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {
      capabilities = capabilities,
      on_attach = on_attach,
      settings = servers[server_name],
      filetypes = (servers[server_name] or {}).filetypes,
    }
  end,
}

-- [[ Configure nvim-cmp ]]
-- See `:help cmp`
local cmp = require 'cmp'
local luasnip = require 'luasnip'
require('luasnip.loaders.from_vscode').lazy_load()
luasnip.config.setup {}

cmp.setup {
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  completion = {
    completeopt = 'menu,menuone,noinsert',
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete {},
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_locally_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.locally_jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
    { name = 'path' },
  },
}

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et
#+end_src

* git

** .gitconfig

#+begin_src conf :tangle .gitconfig
[user]
	name = sauco
	email = sauco.navarro@team.wrike.com

[fetch]
    prune = true

#+end_src


** ignore

#+begin_src conf :tangle .config/git/ignore
.venv
.DS_Store
*.pyc
.nox 
.idea
.vscode
.pytest_cache
.ruff_cache
.mypy_cache
__pycache__    
.direnv
#+end_src
